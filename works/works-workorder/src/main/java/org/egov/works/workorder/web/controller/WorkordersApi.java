/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.egov.works.workorder.web.controller;

import io.swagger.annotations.*;
import org.egov.works.workorder.web.contract.ErrorRes;
import org.egov.works.workorder.web.contract.RequestInfo;
import org.egov.works.workorder.web.contract.WorkOrderRequest;
import org.egov.works.workorder.web.contract.WorkOrderResponse;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2017-11-27T05:41:29.315Z")

@Api(value = "workorders", description = "the workorders API")
public interface WorkordersApi {

    @ApiOperation(value = "Create new Work Order(s).", notes = "To create new Work Order in the system. API supports bulk creation with max limit as defined in the Work Order Request. Please note that either whole batch succeeds or fails, there's no partial batch success. To create one Work Order, please pass array with one Work Order object.  The Work Order can be created only for Approved LOA. Workflow will not be there for spillover work and new works will have workflow. So the spillover work will be created on approved status.  ", response = WorkOrderResponse.class, tags={ "Work Order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Work Order(s) created successfully", response = WorkOrderResponse.class),
        @ApiResponse(code = 400, message = "Work Order(s) creation failed", response = ErrorRes.class) })
    
    @RequestMapping(value = "/workorders/_create",
        method = RequestMethod.POST)
    ResponseEntity<WorkOrderResponse> workordersCreatePost(@ApiParam(value = "Details of new Work Order(s) + RequestInfo meta data." ,required=true )  @Valid @RequestBody WorkOrderRequest workOrderRequest);


    @ApiOperation(value = "Get the list of Work Order(s) defined in the system.", notes = "Search and get Work Order(s) based on defined search criteria. Currently search parameters are only allowed as HTTP query params.  In case multiple parameters are passed Work Order(s) will be searched as an AND combination of all the parameters.  Maximum result size is restricted based on the maxlength of Work Order as defined in WorkOrderResponse model.  Search results will be sorted by the sortProperty Provided in the parameters ", response = WorkOrderResponse.class, tags={ "Work Order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Work Order(s) Retrieved Successfully", response = WorkOrderResponse.class),
        @ApiResponse(code = 400, message = "Invalid input.", response = ErrorRes.class) })
    
    @RequestMapping(value = "/workorders/_search",
        method = RequestMethod.POST)
    ResponseEntity<WorkOrderResponse> workordersSearchPost( @NotNull@ApiParam(value = "Unique id for a tenant.", required = true) @RequestParam(value = "tenantId", required = true) String tenantId,@ApiParam(value = "Parameter to carry Request metadata in the request body"  )  @Valid @RequestBody RequestInfo requestInfo, @Min(0) @Max(100)@ApiParam(value = "Number of records returned.", defaultValue = "20") @RequestParam(value = "pageSize", required = false, defaultValue="20") Integer pageSize,@ApiParam(value = "Page number", defaultValue = "1") @RequestParam(value = "pageNumber", required = false, defaultValue="1") Integer pageNumber,@ApiParam(value = "This takes any field from the Object seperated by comma and asc,desc keywords. example name asc,code desc or name,code or name,code desc", defaultValue = "id") @RequestParam(value = "sortBy", required = false, defaultValue="id") String sortBy, @Size(max=50)@ApiParam(value = "Comma separated list of Work Order Numbers") @RequestParam(value = "workOrderNumbers", required = false) List<String> workOrderNumbers, @Size(max=50)@ApiParam(value = "Comma separated list of Ids of Work Order to get the Work Orders") @RequestParam(value = "ids", required = false) List<String> ids, @Size(max=50)@ApiParam(value = "Comma separated list of LOA Numbers") @RequestParam(value = "loaNumbers", required = false) List<String> loaNumbers, @Size(max=50)@ApiParam(value = "Comma separated list of Detailed Estimate Numbers") @RequestParam(value = "detailedEstimateNumbers", required = false) List<String> detailedEstimateNumbers, @Size(max=50)@ApiParam(value = "Comma separated list of Work Identification Numbers") @RequestParam(value = "workIdentificationNumbers", required = false) List<String> workIdentificationNumbers,@ApiParam(value = "Epoch time for Work Order when it is created in the system") @RequestParam(value = "fromDate", required = false) Long fromDate,@ApiParam(value = "Epoch time for Work Order when it is created in the system") @RequestParam(value = "toDate", required = false) Long toDate, @Size(max=50)@ApiParam(value = "Comma separated list of the Department for which Work Order belongs to.") @RequestParam(value = "department", required = false) List<String> department, @Size(max=50)@ApiParam(value = "Comma separated list of the Work Order Status") @RequestParam(value = "statuses", required = false) List<String> statuses, @Size(max=50)@ApiParam(value = "Comma separated list of Names of the contractor to which Work Order belongs to.") @RequestParam(value = "contractorNames", required = false) List<String> contractorNames, @Size(max=50)@ApiParam(value = "Comma separated list of codes of the contractor to which Work Order belongs to.") @RequestParam(value = "contractorCodes", required = false) List<String> contractorCodes, @Size(max=50)@ApiParam(value = "Comma separated list of ids of the Letter Of Acceptances to which Work Order belongs to.") @RequestParam(value = "letterOfAcceptances", required = false) List<String> letterOfAcceptances);


    @ApiOperation(value = "Update existing Work Order(s).", notes = "To update existing Work Order in the system. API supports bulk updation with max limit as defined in the Work Order Request. Please note that either whole batch succeeds or fails, there's no partial batch success. To update one Work Order, please pass array with one Work Order object.   Only the creator can edit all the fields when the Work Order in creator inbox(in Rejected status). Update during workflow will have all the fields readonly except few fields which are allowed to modify during each stage of workflow including Workflow Details. The status and workflow state will be updated during each stage of workflow approval. ", response = WorkOrderResponse.class, tags={ "Work Order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Work Order(s) updated successfully", response = WorkOrderResponse.class),
        @ApiResponse(code = 400, message = "Work Order(s) updation failed", response = ErrorRes.class) })
    
    @RequestMapping(value = "/workorders/_update",
        method = RequestMethod.POST)
    ResponseEntity<WorkOrderResponse> workordersUpdatePost(@ApiParam(value = "Details of Work Order(s) + RequestInfo meta data." ,required=true )  @Valid @RequestBody WorkOrderRequest workOrderRequest);

}