"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _reactGoogleMaps = require("react-google-maps");

var _withScriptjs = require("react-google-maps/lib/async/withScriptjs");

var _withScriptjs2 = _interopRequireDefault(_withScriptjs);

var _SearchBox = require("react-google-maps/lib/places/SearchBox");

var _SearchBox2 = _interopRequireDefault(_SearchBox);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* global google */


var INPUT_STYLE = {
  boxSizing: "border-box",
  MozBoxSizing: "border-box",
  border: "1px solid transparent",
  width: "240px",
  height: "32px",
  marginTop: "9px",
  padding: "0 12px",
  borderRadius: "1px",
  boxShadow: "0 2px 6px rgba(0, 0, 0, 0.3)",
  fontSize: "14px",
  outline: "none",
  textOverflow: "ellipses"
};
/*
 * This is the modify version of:
 * https://developers.google.com/maps/documentation/javascript/examples/event-arguments
 *
 * Loaded using async loader.
 */
var AsyncGettingStartedExampleGoogleMap = _lodash2.default.flowRight(_withScriptjs2.default, _reactGoogleMaps.withGoogleMap)(function (props) {
  return _react2.default.createElement(
    _reactGoogleMaps.GoogleMap,
    {
      options: { scrollwheel: false },
      ref: props.onMapMounted,
      defaultZoom: 11,
      center: props.center,
      onBoundsChanged: props.onBoundsChanged
    },
    _react2.default.createElement(_SearchBox2.default, {
      ref: props.onSearchBoxMounted,
      bounds: props.bounds,
      controlPosition: google.maps.ControlPosition.TOP_LEFT,
      onPlacesChanged: props.onPlacesChanged,
      inputPlaceholder: "Customized your placeholder",
      inputStyle: INPUT_STYLE
    }),
    props.markers.map(function (marker, index) {
      return _react2.default.createElement(_reactGoogleMaps.Marker, { position: marker.position, key: index });
    })
  );
});

var SimpleMap = function (_Component) {
  _inherits(SimpleMap, _Component);

  function SimpleMap(props) {
    _classCallCheck(this, SimpleMap);

    var _this = _possibleConstructorReturn(this, (SimpleMap.__proto__ || Object.getPrototypeOf(SimpleMap)).call(this, props));

    _this.handleMapMounted = _this.handleMapMounted.bind(_this);
    _this.handleBoundsChanged = _this.handleBoundsChanged.bind(_this);
    _this.handleSearchBoxMounted = _this.handleSearchBoxMounted.bind(_this);
    _this.handlePlacesChanged = _this.handlePlacesChanged.bind(_this);

    _this.state = {
      center: { lat: 0.0, lng: 0.0 },
      markers: [{
        position: { lat: 0.0, lng: 0.0 }
      }]
    };
    return _this;
  }

  _createClass(SimpleMap, [{
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.lat && nextProps.lng) {
        this.setState({ center: { lat: nextProps.lat, lng: nextProps.lng } });
        this.setState({ markers: [{ position: { lat: nextProps.lat, lng: nextProps.lng } }] });
      }
    }
  }, {
    key: "handleMapMounted",
    value: function handleMapMounted(map) {
      this._map = map;
    }
  }, {
    key: "handleBoundsChanged",
    value: function handleBoundsChanged() {
      var _this2 = this;

      var tempArray = [];
      tempArray.push(this._map.getCenter());

      // Add a marker for each place returned from search bar
      var markers = tempArray.map(function (place) {
        return {
          position: _this2._map.getCenter()
        };
      });

      // Set markers; set map center to first search result
      var mapCenter = markers.length > 0 ? markers[0].position : this.state.center;

      this.setState({
        center: mapCenter,
        markers: markers
      });
    }
  }, {
    key: "handleSearchBoxMounted",
    value: function handleSearchBoxMounted(searchBox) {
      this._searchBox = searchBox;
    }
  }, {
    key: "handlePlacesChanged",
    value: function handlePlacesChanged() {
      var places = this._searchBox.getPlaces();

      // Add a marker for each place returned from search bar
      var markers = places.map(function (place) {
        return {
          position: place.geometry.location
        };
      });

      // Set markers; set map center to first search result
      var mapCenter = markers.length > 0 ? markers[0].position : this.state.center;

      this.setState({
        center: mapCenter,
        markers: markers
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      return _react2.default.createElement(AsyncGettingStartedExampleGoogleMap, {
        googleMapURL: "https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=AIzaSyDrxvgg2flbGdU9Fxn6thCbNf3VhLnxuFY",
        loadingElement: _react2.default.createElement("div", { style: { height: "100%" } }),
        containerElement: _react2.default.createElement("div", { style: { height: "100%" } }),
        mapElement: _react2.default.createElement("div", { style: { height: "100%" } }),
        center: this.state.center,
        onMapMounted: this.handleMapMounted,
        onBoundsChanged: function onBoundsChanged() {
          _this3.handleBoundsChanged();_this3.props.handler(_this3.state.center.lat(), _this3.state.center.lng());
        },
        onSearchBoxMounted: this.handleSearchBoxMounted,
        bounds: this.state.bounds,
        onPlacesChanged: function onPlacesChanged() {
          _this3.handlePlacesChanged();_this3.props.handler(_this3.state.center.lat(), _this3.state.center.lng());
        },
        markers: this.state.markers
      });
    }
  }]);

  return SimpleMap;
}(_react.Component);

exports.default = SimpleMap;