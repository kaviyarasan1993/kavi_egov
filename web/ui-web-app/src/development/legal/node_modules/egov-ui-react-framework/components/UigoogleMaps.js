'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _RaisedButton = require('material-ui/RaisedButton');

var _RaisedButton2 = _interopRequireDefault(_RaisedButton);

var _Dialog = require('material-ui/Dialog');

var _Dialog2 = _interopRequireDefault(_Dialog);

var _FlatButton = require('material-ui/FlatButton');

var _FlatButton2 = _interopRequireDefault(_FlatButton);

var _TextField = require('material-ui/TextField');

var _TextField2 = _interopRequireDefault(_TextField);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _reactGoogleMaps = require('react-google-maps');

var _withScriptjs = require('react-google-maps/lib/async/withScriptjs');

var _withScriptjs2 = _interopRequireDefault(_withScriptjs);

var _SearchBox = require('react-google-maps/lib/places/SearchBox');

var _SearchBox2 = _interopRequireDefault(_SearchBox);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* global google */


var axios = require('axios');
var _this;
var addressHolder;

var INPUT_STYLE = {
  boxSizing: 'border-box',
  MozBoxSizing: 'border-box',
  border: '1px solid transparent',
  width: '240px',
  height: '32px',
  marginTop: '9px',
  padding: '0 12px',
  borderRadius: '1px',
  boxShadow: '0 2px 6px rgba(0, 0, 0, 0.3)',
  fontSize: '14px',
  outline: 'none',
  textOverflow: 'ellipses'
};
/*
 * This is the modify version of:
 * https://developers.google.com/maps/documentation/javascript/examples/event-arguments
 *
 * Loaded using async loader.
 */
var AsyncGettingStartedExampleGoogleMap = _lodash2.default.flowRight(_withScriptjs2.default, _reactGoogleMaps.withGoogleMap)(function (props) {
  return _react2.default.createElement(
    _reactGoogleMaps.GoogleMap,
    {
      options: { scrollwheel: false },
      ref: props.onMapMounted,
      defaultZoom: 11,
      center: props.center,
      onBoundsChanged: props.onBoundsChanged
    },
    _react2.default.createElement(_SearchBox2.default, {
      ref: props.onSearchBoxMounted,
      bounds: props.bounds,
      controlPosition: google.maps.ControlPosition.TOP_LEFT,
      onPlacesChanged: props.onPlacesChanged,

      inputPlaceholder: 'Search',
      inputStyle: INPUT_STYLE
    }),
    props.markers.map(function (marker, index) {
      return _react2.default.createElement(_reactGoogleMaps.Marker, { position: marker.position, key: index });
    })
  );
});

var SimpleMap = function (_Component) {
  _inherits(SimpleMap, _Component);

  function SimpleMap(props) {
    _classCallCheck(this, SimpleMap);

    var _this2 = _possibleConstructorReturn(this, (SimpleMap.__proto__ || Object.getPrototypeOf(SimpleMap)).call(this, props));

    _this2.handleMapMounted = _this2.handleMapMounted.bind(_this2);
    _this2.handleBoundsChanged = _this2.handleBoundsChanged.bind(_this2);
    _this2.handleSearchBoxMounted = _this2.handleSearchBoxMounted.bind(_this2);
    _this2.handlePlacesChanged = _this2.handlePlacesChanged.bind(_this2);

    _this2.state = {
      zoom: 10,
      center: { lat: 19.0760, lng: 72.8777 },
      markers: [{
        position: { lat: 19.0760, lng: 72.8777 }
      }]
    };
    return _this2;
  }

  _createClass(SimpleMap, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.lat && nextProps.lng) {
        this.setState({ center: { lat: nextProps.lat, lng: nextProps.lng } });
        this.setState({ markers: [{ position: { lat: nextProps.lat, lng: nextProps.lng } }] });
      }
    }
  }, {
    key: 'handleMapMounted',
    value: function handleMapMounted(map) {
      this._map = map;
    }
  }, {
    key: 'handleBoundsChanged',
    value: function handleBoundsChanged() {
      var _this3 = this;

      var tempArray = [];
      tempArray.push(this._map.getCenter());

      // Add a marker for each place returned from search bar
      var markers = tempArray.map(function (place) {
        return {
          position: _this3._map.getCenter()
        };
      });

      // Set markers; set map center to first search result
      var mapCenter = markers.length > 0 ? markers[0].position : this.state.center;

      this.setState({
        center: mapCenter,
        markers: markers
      });
    }
  }, {
    key: 'handleSearchBoxMounted',
    value: function handleSearchBoxMounted(searchBox) {
      this._searchBox = searchBox;
    }
  }, {
    key: 'handlePlacesChanged',
    value: function handlePlacesChanged() {
      var places = this._searchBox.getPlaces();

      // Add a marker for each place returned from search bar
      var markers = places.map(function (place) {
        return {
          position: place.geometry.location
        };
      });

      // Set markers; set map center to first search result
      var mapCenter = markers.length > 0 ? markers[0].position : this.state.center;

      this.setState({
        center: mapCenter,
        markers: markers
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this4 = this;

      return _react2.default.createElement(AsyncGettingStartedExampleGoogleMap, {
        googleMapURL: 'https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=AIzaSyDrxvgg2flbGdU9Fxn6thCbNf3VhLnxuFY',
        loadingElement: _react2.default.createElement('div', { style: { height: '100%' } }),
        containerElement: _react2.default.createElement('div', { style: { height: '100%' } }),
        mapElement: _react2.default.createElement('div', { style: { height: '100%' } }),
        center: this.state.center,
        onMapMounted: this.handleMapMounted,
        onBoundsChanged: function onBoundsChanged() {
          _this4.handleBoundsChanged();_this4.props.handler(_this4.state.center.lat(), _this4.state.center.lng());
        },
        onSearchBoxMounted: this.handleSearchBoxMounted,
        bounds: this.state.bounds,
        onPlacesChanged: function onPlacesChanged() {
          _this4.handlePlacesChanged();_this4.props.handler(_this4.state.center.lat(), _this4.state.center.lng());
        },
        markers: this.state.markers
      });
    }
  }]);

  return SimpleMap;
}(_react.Component);

var UigoogleMaps = function (_Component2) {
  _inherits(UigoogleMaps, _Component2);

  function UigoogleMaps(props) {
    _classCallCheck(this, UigoogleMaps);

    var _this5 = _possibleConstructorReturn(this, (UigoogleMaps.__proto__ || Object.getPrototypeOf(UigoogleMaps)).call(this, props));

    _this5.getAddress = function (lat, lng) {
      console.log(addressHolder);
      var self = _this5;
      axios.post('https://maps.googleapis.com/maps/api/geocode/json?latlng=' + lat + ',' + lng + '&sensor=true').then(function (response) {
        addressHolder = response.data.results[0] ? response.data.results[0].formatted_address : '';
        console.log(addressHolder);
      });
      console.log(addressHolder);
    };

    _this5.renderMaps = function (item) {
      switch (_this5.props.ui) {
        case 'google':
          var actions = [_react2.default.createElement(_FlatButton2.default, {
            label: 'Select',
            primary: true,
            onClick: _this5.handleClose
          })];
          return _react2.default.createElement(
            'div',
            null,
            _react2.default.createElement(_TextField2.default, {
              floatingLabelFixed: true,
              floatingLabelText: _react2.default.createElement(
                'span',
                null,
                item.label,
                ' ',
                _react2.default.createElement(
                  'span',
                  { style: { "color": "#FF0000", "fontSize": "18px" } },
                  item.isRequired ? " *" : ""
                )
              ),
              style: { width: '70%', padding: "0px" },
              textareaStyle: { color: 'black' },
              className: 'custom-form-control-for-textarea',
              disabled: true,
              multiLine: true,
              value: _this5.props.getVal(item.jsonPathAddress)
            }),
            _react2.default.createElement(_FlatButton2.default, { id: item.label.split(".").join("-"),
              style: { width: '20%' },
              icon: _react2.default.createElement('img', { src: './temp/images/map_logo.png', height: '37px', width: '30%' }),
              type: item.uiType || "button", primary: typeof item.primary != 'undefined' ? item.primary : true, secondary: item.secondary || false, onClick: _this5.handleOpen, disabled: item.isDisabled ? true : false }),
            _react2.default.createElement(
              _Dialog2.default,
              {
                title: 'Google Maps',
                style: { width: '90%', height: '90%' },
                actions: actions,
                modal: true,
                open: _this5.state.open
              },
              _react2.default.createElement(
                'div',
                { style: { width: '100%', height: 400 } },
                _react2.default.createElement(SimpleMap, { markers: [], handler: function handler(lat, lng) {
                    _this5.getAddress(lat, lng);
                    var self = _this5;
                    _this5.props.handler({ target: { value: lng } }, item.jsonPathLng, item.isRequired ? true : false, '', item.requiredErrMsg, item.patternErrMsg);
                    _this5.props.handler({ target: { value: lat } }, item.jsonPathLat, item.isRequired ? true : false, '', item.requiredErrMsg, item.patternErrMsg);
                    console.log(item);
                    axios.post('https://maps.googleapis.com/maps/api/geocode/json?latlng=' + lat + ',' + lng + '&sensor=true').then(function (response) {
                      addressHolder = response.data.results[0] ? response.data.results[0].formatted_address : '';
                      console.log(addressHolder);
                      self.props.handler({ target: { value: addressHolder } }, item.jsonPathAddress, item.isRequired ? true : false, '', item.requiredErrMsg, item.patternErrMsg);
                    });
                  }
                })
              )
            )
          );
      }
    };

    _this5.state = {
      open: false
    };

    _this5.handleOpen = function () {
      _this5.setState({ open: true });
    };

    _this5.handleClose = function () {
      _this5.setState({ open: false });
    };
    return _this5;
  }

  _createClass(UigoogleMaps, [{
    key: 'render',
    value: function render() {
      return this.renderMaps(this.props.item);
    }
  }]);

  return UigoogleMaps;
}(_react.Component);

exports.default = UigoogleMaps;