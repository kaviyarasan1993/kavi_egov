'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _RaisedButton = require('material-ui/RaisedButton');

var _RaisedButton2 = _interopRequireDefault(_RaisedButton);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var UiButton = function (_Component) {
	_inherits(UiButton, _Component);

	function UiButton(props) {
		_classCallCheck(this, UiButton);

		var _this = _possibleConstructorReturn(this, (UiButton.__proto__ || Object.getPrototypeOf(UiButton)).call(this, props));

		_this.renderBtn = function (item) {
			switch (_this.props.ui) {
				case 'google':
					return _react2.default.createElement(_RaisedButton2.default, { id: item.label.split(".").join("-"), type: item.uiType || "button", label: item.label, primary: typeof item.primary != 'undefined' ? item.primary : true, secondary: item.secondary || false, onClick: _this.props.handler || function () {}, disabled: item.isDisabled ? true : false });
			}
		};

		return _this;
	}

	_createClass(UiButton, [{
		key: 'render',
		value: function render() {
			return this.renderBtn(this.props.item);
		}
	}]);

	return UiButton;
}(_react.Component);

exports.default = UiButton;