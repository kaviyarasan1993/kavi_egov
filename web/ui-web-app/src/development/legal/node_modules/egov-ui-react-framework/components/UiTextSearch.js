'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _TextField = require('material-ui/TextField');

var _TextField2 = _interopRequireDefault(_TextField);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var UiTextSearch = function (_Component) {
	_inherits(UiTextSearch, _Component);

	function UiTextSearch(props) {
		_classCallCheck(this, UiTextSearch);

		var _this = _possibleConstructorReturn(this, (UiTextSearch.__proto__ || Object.getPrototypeOf(UiTextSearch)).call(this, props));

		_this.renderTextSearch = function (item) {
			switch (_this.props.ui) {
				case 'google':
					return _react2.default.createElement(
						'div',
						{ style: { position: 'relative', display: 'inline' } },
						_react2.default.createElement(_TextField2.default, {
							className: 'custom-form-control-for-textfield',
							id: item.jsonPath.split(".").join("-"),
							floatingLabelStyle: { "color": item.isDisabled ? "#A9A9A9" : "#696969", "fontSize": "20px" },
							inputStyle: { "color": "#5F5C57" },
							floatingLabelFixed: true,
							onBlur: function onBlur(ev) {
								return _this.props.autoComHandler(item.autoCompleteDependancy, item.jsonPath);
							},
							style: { "display": item.hide ? 'none' : 'inline-block' },
							errorStyle: { "float": "left" },
							fullWidth: true,
							maxLength: item.maxLength || "",
							floatingLabelText: _react2.default.createElement(
								'span',
								null,
								item.label,
								' ',
								_react2.default.createElement(
									'span',
									{ style: { "color": "#FF0000" } },
									item.isRequired ? " *" : ""
								)
							),
							value: _this.props.getVal(item.jsonPath),
							disabled: item.isDisabled,
							errorText: _this.props.fieldErrors[item.jsonPath],
							onChange: function onChange(e) {
								if (e.target.value) {
									e.target.value = e.target.value.replace(/^\s*/, "");
									if (e.target.value[e.target.value.length - 1] == " " && e.target.value[e.target.value.length - 2] == " ") return;
								}
								_this.props.handler(e, item.jsonPath, item.isRequired ? true : false, item.pattern, item.requiredErrMsg, item.patternErrMsg, item.expression, item.expressionMsg);
							} }),
						_react2.default.createElement('span', { className: 'glyphicon glyphicon-search', style: { "position": "absolute", "right": "10px", "display": item.display ? 'none' : '' }, onClick: function onClick() {
								return _this.props.autoComHandler(item.autoCompleteDependancy, item.jsonPath);
							} })
					);
			}
		};

		return _this;
	}

	_createClass(UiTextSearch, [{
		key: 'render',
		value: function render() {
			return _react2.default.createElement(
				'div',
				null,
				this.renderTextSearch(this.props.item)
			);
		}
	}]);

	return UiTextSearch;
}(_react.Component);

exports.default = UiTextSearch;