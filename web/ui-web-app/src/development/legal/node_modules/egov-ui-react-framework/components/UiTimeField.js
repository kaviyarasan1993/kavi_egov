'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _egovCommonUtility = require('egov-common-utility');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
// import TimePicker from 'material-ui/TimePicker';


var DateTimeField = require('react-bootstrap-datetimepicker');
var moment = require('moment');

var UiTimeField = function (_Component) {
	_inherits(UiTimeField, _Component);

	function UiTimeField(props) {
		_classCallCheck(this, UiTimeField);

		var _this = _possibleConstructorReturn(this, (UiTimeField.__proto__ || Object.getPrototypeOf(UiTimeField)).call(this, props));

		_this.renderTimePicker = function (item) {
			// let value ="";
			// if(this.props.getVal(item.jsonPath).split(':').length==2){
			// 	value=new Date('2017','12','1',this.props.getVal(item.jsonPath).split(':')[0],this.props.getVal(item.jsonPath).split(':')[1]);
			// }else if(item.defaultValue){
			// 	value=new Date('2017','12','1',item.defaultValue.split(':')[0],item.defaultValue.split(':')[1]);

			// }
			switch (_this.props.ui) {
				case 'google':
					return (
						// <TimePicker
						// 	id={item.jsonPath.split(".").join("-")}
						// 	className="custom-form-control-for-textfield"
						// 	style={{"display": (item.hide ? 'none' : 'inline-block')}}
						// 	floatingLabelStyle={{"color": item.isDisabled ? "#A9A9A9" : "#696969", "fontSize": "20px", "white-space": "nowrap"}}
						// 	inputStyle={{"color": "#5F5C57"}}
						// 	floatingLabelFixed={true}
						// 	disabled={item.isDisabled}
						// 	hintText="12hr Format"
						// 	format="ampm"
						// 	floatingLabelText={<span>{item.label} <span style={{"color": "#FF0000"}}>{item.isRequired ? " *" : ""}</span></span>}
						// 	errorText={this.props.fieldErrors[item.jsonPath]}
						//     value={value}//this.props.getVal(item.jsonPath)}
						// 	onChange={(e,time) => {debugger;
						//      var val = time.getHours()+":"+time.getMinutes();
						//         this.props.handler({target: {value: val}}, item.jsonPath, item.isRequired ? true : false, item.pattern, item.requiredErrMsg, item.patternErrMsg)
						//     }}/>
						_react2.default.createElement(
							'div',
							{ style: { "marginTop": "17px", "display": item.hide ? 'none' : 'inline-block' }, className: 'custom-form-control-for-datepicker' },
							_react2.default.createElement(
								'label',
								null,
								item.label,
								' ',
								_react2.default.createElement(
									'span',
									{ style: { "color": "#FF0000" } },
									item.isRequired ? " *" : ""
								)
							),
							_react2.default.createElement('br', null),
							_react2.default.createElement(DateTimeField, {
								mode: 'time',
								dateTime: _this.props.getVal(item.jsonPath) || undefined,
								size: 'sm',
								inputFormat: 'h:mm A',
								inputProps: {
									"placeholder": "h:mm A",
									"id": item.jsonPath.split(".").join("-")
								},
								defaultText: '',
								onChange: function onChange(e) {
									debugger;
									_this.props.handler({ target: { value: e } }, item.jsonPath, item.isRequired ? true : false, /\d{12,13}/, item.requiredErrMsg, item.patternErrMsg || (0, _egovCommonUtility.translate)("framework.time.error.message"), item.expression, item.expressionMsg, true);
								}
							}),
							_react2.default.createElement(
								'div',
								{ style: { "height": "23px", "visibility": _this.props.fieldErrors && _this.props.fieldErrors[item.jsonPath] ? "visible" : "hidden", "position": "relative", "fontSize": "12px", "lineHeight": "23px", "color": "rgb(244, 67, 54)", "transition": "all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms", "float": "left" } },
								_this.props.fieldErrors && _this.props.fieldErrors[item.jsonPath] ? _this.props.fieldErrors[item.jsonPath] : " "
							)
						)
					);
			}
		};

		return _this;
	}

	_createClass(UiTimeField, [{
		key: 'render',
		value: function render() {
			return this.renderTimePicker(this.props.item);
		}
	}]);

	return UiTimeField;
}(_react.Component);

exports.default = UiTimeField;