'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _TextField = require('material-ui/TextField');

var _TextField2 = _interopRequireDefault(_TextField);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var UiNumberField = function (_Component) {
	_inherits(UiNumberField, _Component);

	function UiNumberField(props) {
		_classCallCheck(this, UiNumberField);

		var _this = _possibleConstructorReturn(this, (UiNumberField.__proto__ || Object.getPrototypeOf(UiNumberField)).call(this, props));

		_this.renderNumberBox = function (item) {
			var _React$createElement;

			var y = void 0,
			    m = void 0,
			    d = void 0,
			    date = void 0;
			if (_this.props.getVal(item.jsonPath)) {
				y = new Date(_this.props.getVal(item.jsonPath)).getFullYear();
				m = new Date(_this.props.getVal(item.jsonPath)).getMonth() < 10 ? "0" + new Date(_this.props.getVal(item.jsonPath)).getMonth() : new Date(_this.props.getVal(item.jsonPath)).getMonth();
				d = new Date(_this.props.getVal(item.jsonPath)).getDate() < 10 ? "0" + new Date(_this.props.getVal(item.jsonPath)).getDate() : new Date(_this.props.getVal(item.jsonPath)).getDate();
				// date=y+"-"+("0"+(m-1).toString())+"-"+d;
				date = y + "-" + (parseInt(m) + 1 > 10 ? parseInt(m) + 1 : "0" + (parseInt(m) + 1)) + "-" + d;
			}
			switch (_this.props.ui) {
				case 'google':
					return _react2.default.createElement(_TextField2.default, (_React$createElement = {
						id: item.jsonPath.split(".").join("-"),
						className: 'custom-form-control-for-textfield',
						floatingLabelStyle: { "color": item.isDisabled ? "#A9A9A9" : "#696969", "fontSize": "20px" },
						inputStyle: { "color": "#5F5C57" },
						floatingLabelFixed: true,
						style: { "display": item.hide ? 'none' : 'inline-block' },
						errorStyle: { "float": "left" },
						fullWidth: true,
						type: 'date',
						floatingLabelText: _react2.default.createElement(
							'span',
							null,
							item.label,
							' ',
							_react2.default.createElement(
								'span',
								{ style: { "color": "#FF0000" } },
								item.isRequired ? " *" : ""
							)
						)
					}, _defineProperty(_React$createElement, 'floatingLabelFixed', true), _defineProperty(_React$createElement, 'value', date), _defineProperty(_React$createElement, 'disabled', item.isDisabled), _defineProperty(_React$createElement, 'errorText', _this.props.fieldErrors[item.jsonPath]), _defineProperty(_React$createElement, 'onChange', function onChange(e) {
						if (new Date(e.target.value.split("-")[0]) > 1903) {
							_this.props.handler({ target: { value: new Date(e.target.value.split("-")[0], e.target.value.split("-")[1] - 1, e.target.value.split("-")[2]).getTime() } }, item.jsonPath, item.isRequired ? true : false, item.pattern, item.requiredErrMsg, item.patternErrMsg);
						}
					}), _React$createElement));
			}
		};

		return _this;
	}
	// .getFullYear()+"-"+(new Date(this.props.getVal(item.jsonPath)).getMonth())>9?(new Date(this.props.getVal(item.jsonPath)).getMonth()):"0"+(new Date(this.props.getVal(item.jsonPath)).getMonth())+"-"+(new Date(this.props.getVal(item.jsonPath)).getDate()>9)?(new Date(this.props.getVal(item.jsonPath)).getDate()):("0"+new Date(this.props.getVal(item.jsonPath)).getDate())


	_createClass(UiNumberField, [{
		key: 'render',
		value: function render() {
			return _react2.default.createElement(
				'div',
				null,
				this.renderNumberBox(this.props.item)
			);
		}
	}]);

	return UiNumberField;
}(_react.Component);

exports.default = UiNumberField;