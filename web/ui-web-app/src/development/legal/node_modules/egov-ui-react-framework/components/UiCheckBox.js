'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Checkbox = require('material-ui/Checkbox');

var _Checkbox2 = _interopRequireDefault(_Checkbox);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var UiCheckBox = function (_Component) {
	_inherits(UiCheckBox, _Component);

	function UiCheckBox(props) {
		_classCallCheck(this, UiCheckBox);

		var _this = _possibleConstructorReturn(this, (UiCheckBox.__proto__ || Object.getPrototypeOf(UiCheckBox)).call(this, props));

		_this.renderCheckBox = function (item, isSelected) {
			switch (_this.props.ui) {
				case 'google':
					return _react2.default.createElement(_Checkbox2.default, {
						id: item.jsonPath.split(".").join("-"),
						style: { "display": item.hide ? 'none' : 'inline-block', "marginTop": "43px", "marginLeft": "-5px" },
						label: item.label + (item.isRequired ? " *" : ""),
						checked: _this.props.getVal ? _this.props.getVal(item.jsonPath) : isSelected,
						disabled: item.isDisabled,
						errorText: _this.props.fieldErrors ? _this.props.fieldErrors[item.jsonPath] : "Empty",
						onCheck: function onCheck(e) {
							return _this.props.handler({ target: { value: e.target.checked } }, item.jsonPath, item.isRequired ? true : false, '', item.requiredErrMsg, item.patternErrMsg, item.expression, item.expressionMsg);
						} });
			}
		};

		return _this;
	}

	_createClass(UiCheckBox, [{
		key: 'render',
		value: function render() {
			return _react2.default.createElement(
				'div',
				null,
				this.renderCheckBox(this.props.item, this.props.isSelected)
			);
		}
	}]);

	return UiCheckBox;
}(_react.Component);

exports.default = UiCheckBox;