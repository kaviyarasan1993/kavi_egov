'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _TextField = require('material-ui/TextField');

var _TextField2 = _interopRequireDefault(_TextField);

var _egovCommonUtility = require('egov-common-utility');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DateTime = require('react-datetime');
var moment = require('moment');

var datePat = /^(((0[1-9]|[12]\d|3[01])\/(0[13578]|1[02])\/((19|[2-9]\d)\d{2}))|((0[1-9]|[12]\d|30)\/(0[13456789]|1[012])\/((19|[2-9]\d)\d{2}))|((0[1-9]|1\d|2[0-8])\/02\/((19|[2-9]\d)\d{2}))|(29\/02\/((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))))$/g;

var UiEmailField = function (_Component) {
	_inherits(UiEmailField, _Component);

	function UiEmailField(props) {
		_classCallCheck(this, UiEmailField);

		var _this = _possibleConstructorReturn(this, (UiEmailField.__proto__ || Object.getPrototypeOf(UiEmailField)).call(this, props));

		_this.calcMinMaxDate = function (dateStr) {
			if (dateStr) {
				if (dateStr == "today") {
					return moment();
				} else if (dateStr.indexOf("+") > -1) {
					var oneDay = 24 * 60 * 60 * 1000;
					dateStr = dateStr.split("+")[1];
					return moment(new Date(new Date().getTime() + Number(dateStr) * oneDay));
				} else {
					var oneDay = 24 * 60 * 60 * 1000;
					dateStr = dateStr.split("-")[1];
					return moment(new Date(new Date().getTime() - Number(dateStr) * oneDay));
				}
			} else {
				return "";
			}
		};

		_this.getDateFormat = function (timeLong) {
			if (timeLong) {
				if ((timeLong.toString().length == 12 || timeLong.toString().length == 13) && new Date(Number(timeLong)).getTime() > 0) {
					var _date = new Date(Number(timeLong));
					return ('0' + _date.getDate()).slice(-2) + '/' + ('0' + (_date.getMonth() + 1)).slice(-2) + '/' + _date.getFullYear();
				} else {
					return timeLong;
				}
			} else if (!timeLong) return '';
		};

		_this.renderDatePicker = function (item) {
			/*<TextField
   									id={item.jsonPath.split(".").join("-")}
   									className="custom-form-control-for-textfield"
   									style={{"display": (item.hide ? 'none' : 'inline-block')}}
   									floatingLabelStyle={{"color": item.isDisabled ? "#A9A9A9" : "#696969", "fontSize": "20px", "white-space": "nowrap"}}
   									inputStyle={{"color": "#5F5C57"}}
   									floatingLabelFixed={true}
   									disabled={item.isDisabled}
   									hintText="DD/MM/YYYY"
   									maxLength={10}
   									floatingLabelText={<span>{item.label} <span style={{"color": "#FF0000"}}>{item.isRequired ? " *" : ""}</span></span>}
   									errorText={this.props.fieldErrors[item.jsonPath]}
   									value={this.getDateFormat(this.props.getVal(item.jsonPath))}
   									onChange={(e) => {
   										var val = e.target.value;
   										if(e.target.value.length == 2 && !e.target.value.match('/')){
   											val+='/';
   										} else if(e.target.value.length == 5) {
   											var a = e.target.value.split('/');
   											if(!a[1].match('/')){
   												val+='/';
   											}
   										}
   										if(e.target.value) {
   											e.target.value = e.target.value.trim();
   											if(datePat.test(e.target.value)){
   												var _date = e.target.value;
   												_date = _date.split("/");
   												var newDate = _date[1]+"-"+_date[0]+"-"+_date[2];
   												val = Number(new Date(newDate).getTime());
   												if(item.minDate && val< this.calcMinMaxDate(item.minDate)) {
   												return ;
   											} else if(item.maxDate && val > this.calcMinMaxDate(item.maxDate)) {
   													return ;
   												}
   											}
   										}
   											//check hasOwnProperty of epresssion
   										//check isEnabled true
   										//if() put and expression
   										//if true overide item.isRequired=true and item.requiredErrMsg=""
   										//if false
   			                            this.props.handler({target: {value: val}}, item.jsonPath, item.isRequired ? true : false, /\d{12,13}/, item.requiredErrMsg, (item.patternErrMsg || translate("framework.date.error.message")), item.expression, item.expressionMsg, true)
   			                        }}/>*/
			switch (_this.props.ui) {
				case 'google':
					return _react2.default.createElement(
						'div',
						{ style: { "width": "100%", "marginTop": "17px", "display": item.hide ? 'none' : 'inline-block' }, className: 'custom-form-control-for-datepicker' },
						_react2.default.createElement(
							'label',
							null,
							item.label,
							' ',
							_react2.default.createElement(
								'span',
								{ style: { "color": "#FF0000" } },
								item.isRequired ? " *" : ""
							)
						),
						_react2.default.createElement('br', null),
						_react2.default.createElement(DateTime, {
							value: _this.props.getVal(item.jsonPath),
							dateFormat: 'DD/MM/YYYY',
							timeFormat: false,
							inputProps: {
								"placeholder": "DD/MM/YYYY",
								"id": item.jsonPath.split(".").join("-"),
								"disabled": item.isDisabled
							},
							isValidDate: function isValidDate(currentDate) {
								if (item.minDate && item.maxDate) {
									return _this.calcMinMaxDate(item.minDate).isBefore(currentDate) && _this.calcMinMaxDate(item.maxDate).isAfter(currentDate);
								} else if (item.minDate) {
									return _this.calcMinMaxDate(item.minDate).isBefore(currentDate);
								} else if (item.maxDate) {
									return _this.calcMinMaxDate(item.maxDate).isAfter(currentDate);
								} else return true;
							},
							closeOnSelect: true,
							closeOnTab: true,
							onChange: function onChange(e) {
								_this.props.handler({ target: { value: typeof e == 'string' ? e : e.valueOf() } }, item.jsonPath, item.isRequired ? true : false, /\d{12,13}/, item.requiredErrMsg, item.patternErrMsg || (0, _egovCommonUtility.translate)("framework.date.error.message"), item.expression, item.expressionMsg, true);
							}
						}),
						_react2.default.createElement(
							'div',
							{ style: { "height": "23px", "visibility": _this.props.fieldErrors && _this.props.fieldErrors[item.jsonPath] ? "visible" : "hidden", "position": "relative", "fontSize": "12px", "lineHeight": "23px", "color": "rgb(244, 67, 54)", "transition": "all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms", "float": "left" } },
							_this.props.fieldErrors && _this.props.fieldErrors[item.jsonPath] ? _this.props.fieldErrors[item.jsonPath] : " "
						)
					);
			}
		};

		return _this;
	}

	/*calcMinMaxDate = (dateStr) => {
 	if(dateStr) {
 		if(dateStr == "today") {
 			return new Date();
 		} else if(dateStr.indexOf("+") > -1) {
 			var oneDay = 24 * 60 * 60 * 1000;
 			dateStr = dateStr.split("+")[1];
 			return new Date(new Date().getTime() + (Number(dateStr) * oneDay)).getTime();
 		} else {
 			var oneDay = 24 * 60 * 60 * 1000;
 			dateStr = dateStr.split("-")[1];
 			return new Date(new Date().getTime() - (Number(dateStr) * oneDay)).getTime();
 		}
 	} else {
 		return "";
 	}
 }*/

	_createClass(UiEmailField, [{
		key: 'render',
		value: function render() {
			return this.renderDatePicker(this.props.item);
		}
	}]);

	return UiEmailField;
}(_react.Component);

exports.default = UiEmailField;