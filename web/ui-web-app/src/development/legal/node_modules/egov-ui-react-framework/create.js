'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

var _RaisedButton = require('material-ui/RaisedButton');

var _RaisedButton2 = _interopRequireDefault(_RaisedButton);

var _reactBootstrap = require('react-bootstrap');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _showFields = require('./showFields');

var _showFields2 = _interopRequireDefault(_showFields);

var _egovCommonUtility = require('egov-common-utility');

var _jsonpath = require('jsonpath');

var _jsonpath2 = _interopRequireDefault(_jsonpath);

var _UiButton = require('./components/UiButton');

var _UiButton2 = _interopRequireDefault(_UiButton);

var _utility = require('./utility/utility');

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _UiBackButton = require('./components/UiBackButton');

var _UiBackButton2 = _interopRequireDefault(_UiBackButton);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var specifications = {};
var reqRequired = [];
var baseUrl = "https://raw.githubusercontent.com/abhiegov/test/master/specs/";

var REGEXP_FIND_IDX = /\[(.*?)\]+/g;

var Report = function (_Component) {
  _inherits(Report, _Component);

  function Report(props) {
    _classCallCheck(this, Report);

    var _this = _possibleConstructorReturn(this, (Report.__proto__ || Object.getPrototypeOf(Report)).call(this, props));

    _this.state = {
      pathname: ""
    };

    _this.autoComHandler = function (autoObject, path) {
      var self = _this;
      var value = _this.getVal(path);
      if (!value) return;
      var url = autoObject.autoCompleteUrl.split("?")[0];
      var hashLocation = window.location.hash;
      var parameters = autoObject.autoCompleteUrl.substr(autoObject.autoCompleteUrl.indexOf("?") + 1);
      if (parameters.split('&').length > 1) {
        var params = parameters.split('&');
        var query = {};
        for (var i = 0; i < params.length; i++) {
          if (params[i].indexOf('{') > 0) {
            params[i] = params[i].replace(params[i].substr(params[i].indexOf("{"), params[i].indexOf("}") + 1 - params[i].indexOf("{")), value);
          }
          var index = params[i].indexOf("=");
          var id = params[i].substr(0, index);
          var val = params[i].substr(index + 1);
          query[id] = val;
        }
      } else {
        var param = parameters.replace(parameters.substr(parameters.indexOf("{"), parameters.indexOf("}") + 1 - parameters.indexOf("{")), value);
        var index = param.indexOf("=");
        var query = _defineProperty({}, param.substr(0, index), param.substr(index + 1));
      }

      _egovCommonUtility.Api.commonApiPost(url, query, {}, false, specifications[hashLocation.split("/")[2] + '.' + hashLocation.split("/")[1]].useTimestamp).then(function (res) {
        var formData = _extends({}, self.props.formData);
        for (var key in autoObject.autoFillFields) {
          _lodash2.default.set(formData, key, _lodash2.default.get(res, autoObject.autoFillFields[key]));
        }
        self.props.setFormData(formData);
      }, function (err) {
        console.log(err);
      });
    };

    _this.makeAjaxCall = function (formData, url) {
      var self = _this;
      delete formData.ResponseInfo;
      //return console.log(formData);
      _egovCommonUtility.Api.commonApiPost(url || self.props.metaData[self.props.moduleName + '.' + self.props.actionName].url, "", formData, "", true).then(function (response) {
        self.props.setLoadingStatus('hide');
        self.initData();
        self.props.toggleSnackbarAndSetText(true, (0, _egovCommonUtility.translate)(self.props.actionName == "create" ? "wc.create.message.success" : "wc.update.message.success"), true);
        setTimeout(function () {
          if (self.props.metaData[self.props.moduleName + '.' + self.props.actionName].idJsonPath) {
            if (self.props.metaData[self.props.moduleName + '.' + self.props.actionName].ackUrl) {
              var hash = self.props.metaData[self.props.moduleName + '.' + self.props.actionName].ackUrl + "/" + encodeURIComponent(_lodash2.default.get(response, self.props.metaData[self.props.moduleName + '.' + self.props.actionName].idJsonPath));
            } else {
              if (self.props.actionName == "update") {
                var hash = window.location.hash.replace(/(\#\/create\/|\#\/update\/)/, "/view/");
              } else {
                var hash = window.location.hash.replace(/(\#\/create\/|\#\/update\/)/, "/view/") + "/" + encodeURIComponent(_lodash2.default.get(response, self.props.metaData[self.props.moduleName + '.' + self.props.actionName].idJsonPath));
              }
            }

            self.props.setRoute(hash + (self.props.metaData[self.props.moduleName + '.' + self.props.actionName].queryString || ''));
          } else if (self.props.metaData[self.props.moduleName + '.' + self.props.actionName].passResToLocalStore) {
            var hash = self.props.metaData[self.props.moduleName + '.' + self.props.actionName].ackUrl;
            var obj = _lodash2.default.get(response, self.props.metaData[self.props.moduleName + '.' + self.props.actionName].passResToLocalStore);
            localStorage.setItem(self.props.metaData[self.props.moduleName + '.' + self.props.actionName].localStoreResponseKey, JSON.stringify(obj));
            self.props.setRoute(hash);
          }
        }, 1500);
      }, function (err) {
        self.props.setLoadingStatus('hide');
        self.props.toggleSnackbarAndSetText(true, err.message);
      });
    };

    _this.checkCustomFields = function (formData, cb) {
      var self = _this;
      if (self.props.metaData[self.props.moduleName + '.' + self.props.actionName].customFields && self.props.metaData[self.props.moduleName + '.' + self.props.actionName].customFields.initiatorPosition) {
        var jPath = self.props.metaData[self.props.moduleName + '.' + self.props.actionName].customFields.initiatorPosition;
        (0, _utility.getInitiatorPosition)(function (err, pos) {
          if (err) {
            self.toggleSnackbarAndSetText(true, err.message);
          } else {
            _lodash2.default.set(formData, jPath, pos);
            cb(formData);
          }
        });
      } else {
        cb(formData);
      }
    };

    _this.getFileList = function (mockObject, formData) {
      var fileList = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      for (var i = 0; i < mockObject.groups.length; i++) {
        for (var j = 0; j < mockObject.groups[i].fields.length; j++) {
          if (mockObject.groups[i].fields[j].type == "singleFileUpload" && _lodash2.default.get(formData, mockObject.groups[i].fields[j].jsonPath)) {
            fileList[mockObject.groups[i].fields[j].jsonPath] = _lodash2.default.get(formData, mockObject.groups[i].fields[j].jsonPath);
          }
        }

        if (mockObject.groups[i].children && mockObject.groups[i].children.length) {
          for (var k = 0; k < mockObject.groups[i].children.length; k++) {
            _this.getFileList(mockObject.groups[i].children[k], formData, fileList);
          }
        }
      }
    };

    _this.checkForOtherFiles = function (formData, _url) {
      var _this$props = _this.props,
          mockData = _this$props.mockData,
          actionName = _this$props.actionName,
          moduleName = _this$props.moduleName;

      var self = _this;
      var fileList = {};
      _this.getFileList(mockData[moduleName + "." + actionName], formData, fileList);
      var counter = Object.keys(fileList).length;
      if (!counter) {
        self.makeAjaxCall(formData, _url);
      } else {
        (function () {
          var breakOut = 0;

          var _loop = function _loop(key) {
            (0, _utility.fileUpload)(fileList[key], moduleName, function (err, res) {
              if (breakOut == 1) return;
              if (err) {
                breakOut = 1;
                self.props.setLoadingStatus('hide');
                self.props.toggleSnackbarAndSetText(true, err, false, true);
              } else {
                counter--;
                _lodash2.default.set(formData, key, res.files[0].fileStoreId);
                if (counter == 0 && breakOut == 0) self.makeAjaxCall(formData, _url);
              }
            });
          };

          for (var key in fileList) {
            _loop(key);
          }
        })();
      }
    };

    _this.initiateWF = function (action, workflowItem, isHidden, status) {
      var formData = _extends({}, _this.props.formData);
      if (!_lodash2.default.get(formData.workflowItem.jsonPath.objectPath)) {
        _lodash2.default.set(formData, workflowItem.jsonPath.objectPath, {});
      }

      if (!isHidden && !_lodash2.default.get(formData, workflowItem.jsonPath.assigneePath)) {
        return _this.props.toggleSnackbarAndSetText(true, (0, _egovCommonUtility.translate)("wc.create.workflow.fields"), false, true);
      }

      if (action.key.toLowerCase() == "reject" && !_lodash2.default.get(formData, workflowItem.commentsPath)) {
        return _this.props.toggleSnackbarAndSetText(true, (0, _egovCommonUtility.translate)("wc.create.workflow.comment"), false, true);
      }

      _lodash2.default.set(formData, workflowItem.jsonPath.actionPath, action.key);
      _lodash2.default.set(formData, workflowItem.jsonPath.statusPath, status);
      _this.create();
    };

    _this.create = function (e) {
      var self = _this,
          _url = void 0;
      if (e) e.preventDefault();
      self.props.setLoadingStatus('loading');
      var formData = _extends({}, _this.props.formData);
      if (self.props.moduleName && self.props.actionName && self.props.metaData && self.props.metaData[self.props.moduleName + '.' + self.props.actionName].tenantIdRequired) {
        if (!formData[self.props.metaData[self.props.moduleName + '.' + self.props.actionName].objectName]) formData[self.props.metaData[self.props.moduleName + '.' + self.props.actionName].objectName] = {};

        if (formData[self.props.metaData[self.props.moduleName + '.' + self.props.actionName].objectName].constructor == Array) {
          for (var i = 0; i < formData[self.props.metaData[self.props.moduleName + '.' + self.props.actionName].objectName].length; i++) {
            formData[self.props.metaData[self.props.moduleName + '.' + self.props.actionName].objectName][i]["tenantId"] = localStorage.getItem("tenantId") || "default";
          }
        } else formData[self.props.metaData[self.props.moduleName + '.' + self.props.actionName].objectName]["tenantId"] = localStorage.getItem("tenantId") || "default";
      }

      if (/\{.*\}/.test(self.props.metaData[self.props.moduleName + '.' + self.props.actionName].url)) {
        _url = self.props.metaData[self.props.moduleName + '.' + self.props.actionName].url;
        var match = _url.match(/\{.*\}/)[0];
        var jPath = match.replace(/\{|}/g, "");
        _url = _url.replace(match, _lodash2.default.get(formData, jPath));
      }

      //Check if documents, upload and get fileStoreId
      var formdocumentData = formData[self.props.metaData[self.props.moduleName + '.' + self.props.actionName].objectName];
      var documentPath = self.props.metaData[self.props.moduleName + '.' + self.props.actionName].documentsPath;

      formdocumentData = formdocumentData && formdocumentData.length && formdocumentData[0] || formdocumentData;
      if (documentPath) {
        formdocumentData = _lodash2.default.get(formData, documentPath);
      }

      if (formdocumentData["documents"] && formdocumentData["documents"].length) {
        (function () {
          var documents = [].concat(_toConsumableArray(formdocumentData["documents"]));
          var _docs = [];
          var counter = documents.length,
              breakOut = 0;

          var _loop2 = function _loop2(_i) {
            (0, _utility.fileUpload)(documents[_i].fileStoreId, self.props.moduleName, function (err, res) {
              if (breakOut == 1) return;
              if (err) {
                breakOut = 1;
                self.props.setLoadingStatus('hide');
                self.props.toggleSnackbarAndSetText(true, err, false, true);
              } else {
                _docs.push(_extends({}, documents[_i], {
                  fileStoreId: res.files[0].fileStoreId
                }));
                counter--;
                if (counter == 0 && breakOut == 0) {
                  formdocumentData["documents"] = _docs;
                  self.checkForOtherFiles(formData, _url);
                }
              }
            });
          };

          for (var _i = 0; _i < documents.length; _i++) {
            _loop2(_i);
          }
        })();
      } else {
        self.checkForOtherFiles(formData, _url);
      }
    };

    _this.getVal = function (path, dateBool) {
      var _val = _lodash2.default.get(_this.props.formData, path);
      if (dateBool && typeof _val == 'string' && _val && _val.indexOf("-") > -1) {
        var _date = _val.split("-");
        return new Date(_date[0], Number(_date[1]) - 1, _date[2]);
      }

      return typeof _val != "undefined" ? _val : "";
    };

    _this.getValFromDropdownData = function (fieldJsonPath, key, path) {
      var dropdownData = _this.props.dropDownData[fieldJsonPath] || [];
      var _val = _lodash2.default.get(dropdownData.find(function (data) {
        return data.key == key;
      }) || [], path);
      return typeof _val != "undefined" ? _val : "";
    };

    _this.hideField = function (_mockData, hideObject, reset, val) {
      var _this$props2 = _this.props,
          moduleName = _this$props2.moduleName,
          actionName = _this$props2.actionName,
          setFormData = _this$props2.setFormData,
          delRequiredFields = _this$props2.delRequiredFields,
          removeFieldErrors = _this$props2.removeFieldErrors,
          addRequiredFields = _this$props2.addRequiredFields;

      var _formData = _extends({}, _this.props.formData);
      if (hideObject.isField) {
        for (var i = 0; i < _mockData[moduleName + "." + actionName].groups.length; i++) {
          for (var _j = 0; _j < _mockData[moduleName + "." + actionName].groups[i].fields.length; _j++) {
            if (hideObject.name == _mockData[moduleName + "." + actionName].groups[i].fields[_j].name) {

              reset = _this.resetCheck(_mockData, hideObject.name, val);
              _mockData[moduleName + "." + actionName].groups[i].fields[_j].hide = reset ? false : true;
              if (!reset) {
                _lodash2.default.set(_formData, _mockData[moduleName + "." + actionName].groups[i].fields[_j].jsonPath, '');
                setFormData(_formData);
                //Check if required is true, if yes remove from required fields
                if (_mockData[moduleName + "." + actionName].groups[i].fields[_j].isRequired) {
                  delRequiredFields([_mockData[moduleName + "." + actionName].groups[i].fields[_j].jsonPath]);
                  removeFieldErrors(_mockData[moduleName + "." + actionName].groups[i].fields[_j].jsonPath);
                }
              } else if (_mockData[moduleName + "." + actionName].groups[i].fields[_j].isRequired) {
                addRequiredFields([_mockData[moduleName + "." + actionName].groups[i].fields[_j].jsonPath]);
              }

              break;
            }
          }
        }
      } else {
        var flag = 0;
        for (var _i2 = 0; _i2 < _mockData[moduleName + "." + actionName].groups.length; _i2++) {
          if (hideObject.name == _mockData[moduleName + "." + actionName].groups[_i2].name) {
            flag = 1;

            reset = _this.resetCheck(_mockData, hideObject.name, val);
            //console.log(hideObject.name,reset);
            _mockData[moduleName + "." + actionName].groups[_i2].hide = reset ? false : true;

            if (!reset) {
              var _rReq = [];
              for (var j = 0; j < _mockData[moduleName + "." + actionName].groups[_i2].fields.length; j++) {
                _lodash2.default.set(_formData, _mockData[moduleName + "." + actionName].groups[_i2].fields[j].jsonPath, '');
                if (_mockData[moduleName + "." + actionName].groups[_i2].fields[j].isRequired) {
                  _rReq.push(_mockData[moduleName + "." + actionName].groups[_i2].fields[j].jsonPath);
                  removeFieldErrors(_mockData[moduleName + "." + actionName].groups[_i2].fields[j].jsonPath);
                }
              }
              delRequiredFields(_rReq);
              setFormData(_formData);
            } else {
              var _rReq = [];
              for (var j = 0; j < _mockData[moduleName + "." + actionName].groups[_i2].fields.length; j++) {
                if (_mockData[moduleName + "." + actionName].groups[_i2].fields[j].isRequired) _rReq.push(_mockData[moduleName + "." + actionName].groups[_i2].fields[j].jsonPath);
              }
              addRequiredFields(_rReq);
            }
            break;
          }
        }

        if (flag == 0) {
          for (var _i3 = 0; _i3 < _mockData[moduleName + "." + actionName].groups.length; _i3++) {
            if (_mockData[moduleName + "." + actionName].groups[_i3].children && _mockData[moduleName + "." + actionName].groups[_i3].children.length) {
              for (var _j2 = 0; _j2 < _mockData[moduleName + "." + actionName].groups[_i3].children.length; _j2++) {
                for (var k = 0; k < _mockData[moduleName + "." + actionName].groups[_i3].children[_j2].groups.length; k++) {
                  if (hideObject.name == _mockData[moduleName + "." + actionName].groups[_i3].children[_j2].groups[k].name) {
                    reset = _this.resetCheck(_mockData, hideObject.name, val);
                    _mockData[moduleName + "." + actionName].groups[_i3].children[_j2].groups[k].hide = reset ? false : true;
                    if (!reset) {
                      var _rReq = [];
                      for (var a = 0; a < _mockData[moduleName + "." + actionName].groups[_i3].children[_j2].groups[k].fields.length; a++) {
                        _lodash2.default.set(_formData, _mockData[moduleName + "." + actionName].groups[_i3].children[_j2].groups[k].fields[a].jsonPath, '');
                        if (_mockData[moduleName + "." + actionName].groups[_i3].children[_j2].groups[k].fields[a].isRequired) {
                          _rReq.push(_mockData[moduleName + "." + actionName].groups[_i3].children[_j2].groups[k].fields[a].jsonPath);
                          removeFieldErrors(_mockData[moduleName + "." + actionName].groups[_i3].children[_j2].groups[k].fields[a].jsonPath);
                        }
                      }
                      delRequiredFields(_rReq);
                      setFormData(_formData);
                    } else {
                      var _rReq = [];
                      for (var _a = 0; _a < _mockData[moduleName + "." + actionName].groups[_i3].children[_j2].groups[k].fields.length; _a++) {
                        if (_mockData[moduleName + "." + actionName].groups[_i3].children[_j2].groups[k].fields[_a].isRequired) _rReq.push(_mockData[moduleName + "." + actionName].groups[_i3].children[_j2].groups[k].fields[_a].jsonPath);
                      }
                      addRequiredFields(_rReq);
                    }
                  }
                }
              }
            }
          }
        }
      }
      return _mockData;
    };

    _this.resetCheck = function (mockData, element, val) {
      //let val = 'TEXT';
      console.log('reset check here');
      var _this$props3 = _this.props,
          moduleName = _this$props3.moduleName,
          actionName = _this$props3.actionName,
          setMockData = _this$props3.setMockData;

      for (var i = 0; i < mockData[moduleName + "." + actionName].groups.length; i++) {

        for (var j = 0; j < mockData[moduleName + "." + actionName].groups[i].fields.length; j++) {

          if (mockData[moduleName + "." + actionName].groups[i].fields[j].showHideFields) {
            for (var k = 0; k < mockData[moduleName + "." + actionName].groups[i].fields[j].showHideFields.length; k++) {
              if (mockData[moduleName + "." + actionName].groups[i].fields[j].showHideFields[k].ifValue) {
                for (var l = 0; l < mockData[moduleName + "." + actionName].groups[i].fields[j].showHideFields[k].hide.length; l++) {
                  if (val == mockData[moduleName + "." + actionName].groups[i].fields[j].showHideFields[k].ifValue && element == mockData[moduleName + "." + actionName].groups[i].fields[j].showHideFields[k].hide[l].name) {
                    return false;
                  }
                }
                for (var l = 0; l < mockData[moduleName + "." + actionName].groups[i].fields[j].showHideFields[k].show.length; l++) {
                  if (val == mockData[moduleName + "." + actionName].groups[i].fields[j].showHideFields[k].ifValue && element == mockData[moduleName + "." + actionName].groups[i].fields[j].showHideFields[k].show[l].name) {
                    return true;
                  }
                }
              }
            }
          }
        }
      }
    };

    _this.showField = function (_mockData, showObject, reset) {
      var _this$props4 = _this.props,
          moduleName = _this$props4.moduleName,
          actionName = _this$props4.actionName,
          setFormData = _this$props4.setFormData,
          delRequiredFields = _this$props4.delRequiredFields,
          removeFieldErrors = _this$props4.removeFieldErrors,
          addRequiredFields = _this$props4.addRequiredFields;

      var _formData = _extends({}, _this.props.formData);
      if (showObject.isField) {
        for (var i = 0; i < _mockData[moduleName + "." + actionName].groups.length; i++) {
          for (var _j3 = 0; _j3 < _mockData[moduleName + "." + actionName].groups[i].fields.length; _j3++) {
            if (showObject.name == _mockData[moduleName + "." + actionName].groups[i].fields[_j3].name) {
              _mockData[moduleName + "." + actionName].groups[i].fields[_j3].hide = reset ? true : false;
              if (!reset) {
                _lodash2.default.set(_formData, _mockData[moduleName + "." + actionName].groups[i].fields[_j3].jsonPath, '');
                setFormData(_formData);
                if (_mockData[moduleName + "." + actionName].groups[i].fields[_j3].isRequired) {
                  addRequiredFields([_mockData[moduleName + "." + actionName].groups[i].fields[_j3].jsonPath]);
                }
              } else if (_mockData[moduleName + "." + actionName].groups[i].fields[_j3].isRequired) {
                delRequiredFields([_mockData[moduleName + "." + actionName].groups[i].fields[_j3].jsonPath]);
                removeFieldErrors(_mockData[moduleName + "." + actionName].groups[i].fields[_j3].jsonPath);
              }
              break;
            }
          }
        }
      } else {
        var flag = 0;
        for (var _i4 = 0; _i4 < _mockData[moduleName + "." + actionName].groups.length; _i4++) {
          if (showObject.name == _mockData[moduleName + "." + actionName].groups[_i4].name) {
            flag = 1;
            _mockData[moduleName + "." + actionName].groups[_i4].hide = reset ? true : false;
            if (!reset) {
              var _rReq = [];
              for (var j = 0; j < _mockData[moduleName + "." + actionName].groups[_i4].fields.length; j++) {
                _lodash2.default.set(_formData, _mockData[moduleName + "." + actionName].groups[_i4].fields[j].jsonPath, '');
                if (_mockData[moduleName + "." + actionName].groups[_i4].fields[j].isRequired) _rReq.push(_mockData[moduleName + "." + actionName].groups[_i4].fields[j].jsonPath);
              }

              addRequiredFields(_rReq);
              setFormData(_formData);
            } else {
              var _rReq = [];
              for (var j = 0; j < _mockData[moduleName + "." + actionName].groups[_i4].fields.length; j++) {
                if (_mockData[moduleName + "." + actionName].groups[_i4].fields[j].isRequired) {
                  _rReq.push(_mockData[moduleName + "." + actionName].groups[_i4].fields[j].jsonPath);
                  removeFieldErrors(_mockData[moduleName + "." + actionName].groups[_i4].fields[j].jsonPath);
                }
              }

              if (_mockData[moduleName + "." + actionName].groups[_i4].children && _mockData[moduleName + "." + actionName].groups[_i4].children.length) {
                for (var z = 0; z < _mockData[moduleName + "." + actionName].groups[_i4].children.length; z++) {
                  for (var y = 0; y < _mockData[moduleName + "." + actionName].groups[_i4].children[z].groups.length; y++) {
                    for (var x = 0; x < _mockData[moduleName + "." + actionName].groups[_i4].children[z].groups[y].fields.length; x++) {
                      if (_mockData[moduleName + "." + actionName].groups[_i4].children[z].groups[y].fields[x].isRequired) {
                        _rReq.push(_mockData[moduleName + "." + actionName].groups[_i4].children[z].groups[y].fields[x].jsonPath);
                        removeFieldErrors(_mockData[moduleName + "." + actionName].groups[_i4].children[z].groups[y].fields[x].jsonPath);
                      }
                    }
                  }
                }
              }

              delRequiredFields(_rReq);
            }
            break;
          }
        }

        if (flag == 0) {
          for (var _i5 = 0; _i5 < _mockData[moduleName + "." + actionName].groups.length; _i5++) {
            if (_mockData[moduleName + "." + actionName].groups[_i5].children && _mockData[moduleName + "." + actionName].groups[_i5].children.length) {
              for (var _j4 = 0; _j4 < _mockData[moduleName + "." + actionName].groups[_i5].children.length; _j4++) {
                for (var k = 0; k < _mockData[moduleName + "." + actionName].groups[_i5].children[_j4].groups.length; k++) {
                  if (showObject.name == _mockData[moduleName + "." + actionName].groups[_i5].children[_j4].groups[k].name) {
                    _mockData[moduleName + "." + actionName].groups[_i5].children[_j4].groups[k].hide = reset ? true : false;
                    /*if(!reset) {
                     } else {
                     }*/
                  }
                }
              }
            }
          }
        }
      }

      return _mockData;
    };

    _this.enField = function (_mockData, enableStr, reset) {
      var _this$props5 = _this.props,
          moduleName = _this$props5.moduleName,
          actionName = _this$props5.actionName,
          setFormData = _this$props5.setFormData;

      var _formData = _extends({}, _this.props.formData);
      for (var i = 0; i < _mockData[moduleName + "." + actionName].groups.length; i++) {
        for (var j = 0; j < _mockData[moduleName + "." + actionName].groups[i].fields.length; j++) {
          if (enableStr == _mockData[moduleName + "." + actionName].groups[i].fields[j].name) {
            _mockData[moduleName + "." + actionName].groups[i].fields[j].isDisabled = reset ? true : false;
            if (!reset) {
              _lodash2.default.set(_formData, _mockData[moduleName + "." + actionName].groups[i].fields[j].jsonPath, '');
              setFormData(_formData);
            }
            break;
          }
        }
      }

      return _mockData;
    };

    _this.disField = function (_mockData, disableStr, reset) {
      var _this$props6 = _this.props,
          moduleName = _this$props6.moduleName,
          actionName = _this$props6.actionName,
          setFormData = _this$props6.setFormData;

      var _formData = _extends({}, _this.props.formData);
      for (var i = 0; i < _mockData[moduleName + "." + actionName].groups.length; i++) {
        for (var j = 0; j < _mockData[moduleName + "." + actionName].groups[i].fields.length; j++) {
          if (disableStr == _mockData[moduleName + "." + actionName].groups[i].fields[j].name) {
            _mockData[moduleName + "." + actionName].groups[i].fields[j].isDisabled = reset ? false : true;
            if (!reset) {
              _lodash2.default.set(_formData, _mockData[moduleName + "." + actionName].groups[i].fields[j].jsonPath, '');
              setFormData(_formData);
            }

            break;
          }
        }
      }

      return _mockData;
    };

    _this.checkIfHasEnDisFields = function (jsonPath, val) {
      var _mockData = _extends({}, _this.props.mockData);
      var _this$props7 = _this.props,
          moduleName = _this$props7.moduleName,
          actionName = _this$props7.actionName,
          setMockData = _this$props7.setMockData;

      for (var i = 0; i < _mockData[moduleName + "." + actionName].groups.length; i++) {
        for (var j = 0; j < _mockData[moduleName + "." + actionName].groups[i].fields.length; j++) {
          if (jsonPath == _mockData[moduleName + "." + actionName].groups[i].fields[j].jsonPath && _mockData[moduleName + "." + actionName].groups[i].fields[j].enableDisableFields && _mockData[moduleName + "." + actionName].groups[i].fields[j].enableDisableFields.length) {
            for (var k = 0; k < _mockData[moduleName + "." + actionName].groups[i].fields[j].enableDisableFields.length; k++) {
              if (val == _mockData[moduleName + "." + actionName].groups[i].fields[j].enableDisableFields[k].ifValue) {
                for (var y = 0; y < _mockData[moduleName + "." + actionName].groups[i].fields[j].enableDisableFields[k].disable.length; y++) {
                  _mockData = _this.disField(_mockData, _mockData[moduleName + "." + actionName].groups[i].fields[j].enableDisableFields[k].disable[y]);
                }

                for (var z = 0; z < _mockData[moduleName + "." + actionName].groups[i].fields[j].enableDisableFields[k].enable.length; z++) {
                  _mockData = _this.enField(_mockData, _mockData[moduleName + "." + actionName].groups[i].fields[j].enableDisableFields[k].enable[z]);
                }
              } else {
                for (var _y = 0; _y < _mockData[moduleName + "." + actionName].groups[i].fields[j].enableDisableFields[k].disable.length; _y++) {
                  _mockData = _this.disField(_mockData, _mockData[moduleName + "." + actionName].groups[i].fields[j].enableDisableFields[k].disable[_y], true);
                }

                for (var _z = 0; _z < _mockData[moduleName + "." + actionName].groups[i].fields[j].enableDisableFields[k].enable.length; _z++) {
                  _mockData = _this.enField(_mockData, _mockData[moduleName + "." + actionName].groups[i].fields[j].enableDisableFields[k].enable[_z], true);
                }
              }
            }
          }
        }
      }

      setMockData(_mockData);
    };

    _this.checkIfHasShowHideFields = function (jsonPath, val) {
      var _mockData = _extends({}, _this.props.mockData);
      var _this$props8 = _this.props,
          moduleName = _this$props8.moduleName,
          actionName = _this$props8.actionName,
          setMockData = _this$props8.setMockData;

      for (var i = 0; i < _mockData[moduleName + "." + actionName].groups.length; i++) {
        for (var j = 0; j < _mockData[moduleName + "." + actionName].groups[i].fields.length; j++) {
          if (jsonPath == _mockData[moduleName + "." + actionName].groups[i].fields[j].jsonPath && _mockData[moduleName + "." + actionName].groups[i].fields[j].showHideFields && _mockData[moduleName + "." + actionName].groups[i].fields[j].showHideFields.length) {
            for (var k = 0; k < _mockData[moduleName + "." + actionName].groups[i].fields[j].showHideFields.length; k++) {
              if (val == _mockData[moduleName + "." + actionName].groups[i].fields[j].showHideFields[k].ifValue) {
                for (var y = 0; y < _mockData[moduleName + "." + actionName].groups[i].fields[j].showHideFields[k].hide.length; y++) {
                  _mockData = _this.hideField(_mockData, _mockData[moduleName + "." + actionName].groups[i].fields[j].showHideFields[k].hide[y], false, val);
                }

                for (var z = 0; z < _mockData[moduleName + "." + actionName].groups[i].fields[j].showHideFields[k].show.length; z++) {
                  _mockData = _this.showField(_mockData, _mockData[moduleName + "." + actionName].groups[i].fields[j].showHideFields[k].show[z]);
                }
              } else {
                for (var _y2 = 0; _y2 < _mockData[moduleName + "." + actionName].groups[i].fields[j].showHideFields[k].hide.length; _y2++) {
                  _mockData = _this.hideField(_mockData, _mockData[moduleName + "." + actionName].groups[i].fields[j].showHideFields[k].hide[_y2], true, val);
                }

                for (var _z2 = 0; _z2 < _mockData[moduleName + "." + actionName].groups[i].fields[j].showHideFields[k].show.length; _z2++) {
                  _mockData = _this.showField(_mockData, _mockData[moduleName + "." + actionName].groups[i].fields[j].showHideFields[k].show[_z2], true);
                }
              }
            }
          }
        }
      }
      setMockData(_mockData);
    };

    _this.affectDependants = function (obj, e, property) {
      var _this$props9 = _this.props,
          handleChange = _this$props9.handleChange,
          setDropDownData = _this$props9.setDropDownData,
          setDropDownOriginalData = _this$props9.setDropDownOriginalData,
          dropDownOringalData = _this$props9.dropDownOringalData;
      var getVal = _this.getVal,
          getValFromDropdownData = _this.getValFromDropdownData,
          returnPathValueFunction = _this.returnPathValueFunction;


      var findLastIdxOnJsonPath = function findLastIdxOnJsonPath(jsonPath) {
        var str = jsonPath.split(REGEXP_FIND_IDX);
        for (var _i6 = str.length - 1; _i6 > -1; _i6--) {
          if (str[_i6].match(/\d+/)) {
            return str[_i6];
          }
        }
        return undefined;
      };

      var replaceLastIdxOnJsonPath = function replaceLastIdxOnJsonPath(jsonPath, replaceIdx) {
        var str = jsonPath.split(REGEXP_FIND_IDX);
        var isReplaced = false;
        for (var _i7 = str.length - 1; _i7 > -1; _i7--) {
          if (str[_i7].match(/\d+/)) {
            if (!isReplaced) {
              isReplaced = true;
              str[_i7] = '[' + replaceIdx + ']';
            } else str[_i7] = '[' + str[_i7] + ']';
          }
        }
        return str.join("");
      };
      var depedants = _jsonpath2.default.query(obj, '$.groups..fields[?(@.jsonPath=="' + property + '")].depedants.*');
      var dependantIdx = void 0;
      if (depedants.length === 0 && property) {
        var currentProperty = property;
        dependantIdx = findLastIdxOnJsonPath(property);
        if (dependantIdx !== undefined) currentProperty = replaceLastIdxOnJsonPath(property, 0); //RESET INDEX 0 TO FIND DEPENDANT FIELDS FROM TEMPLATE JSON
        depedants = _jsonpath2.default.query(obj, '$.groups..fields[?(@.type=="tableList")].tableList.values[?(@.jsonPath == "' + currentProperty + '")].depedants.*');

        //Changes to handle table sum
        var jpathname = property.substr(0, property.lastIndexOf("[") + 1) + '0' + property.substr(property.lastIndexOf("[") + 2);

        var dependency = _jsonpath2.default.query(obj, '$.groups..values[?(@.jsonPath=="' + jpathname + '")].dependency');
        if (dependency.length > 0) {
          var _formData = _extends({}, _this.props.formData);
          if (_formData) {
            var field = property.substr(0, property.lastIndexOf("["));
            var last = property.substr(property.lastIndexOf("]") + 2);
            var curIndex = property.substr(property.lastIndexOf("[") + 1, 1);

            var arrval = _lodash2.default.get(_formData, field);
            if (arrval) {
              var len = _lodash2.default.get(_formData, field).length;

              var amtsum = 0;
              var svalue = "";
              for (var i = 0; i < len; i++) {
                var ifield = field + '[' + i + ']' + '.' + last;
                if (i == curIndex) {
                  svalue = e.target.value;
                } else {
                  svalue = _lodash2.default.get(_formData, ifield);
                }

                amtsum += parseInt(svalue);
              }
              if (amtsum > 0) {
                handleChange({
                  target: {
                    value: amtsum
                  }
                }, dependency[0], false, '', '');
              }
            }
          }
        }
      }

      _lodash2.default.forEach(depedants, function (value, key) {
        //console.log(value.type);
        if (value.type == "dropDown") {
          var splitArray = value.pattern.split("?");
          var context = "";
          var id = {};
          for (var j = 0; j < splitArray[0].split("/").length; j++) {
            context += splitArray[0].split("/")[j] + "/";
          }

          var queryStringObject = splitArray[1].split("|")[0].split("&");
          for (var i = 0; i < queryStringObject.length; i++) {
            if (i) {
              if (queryStringObject[i].split("=")[1].search("{") > -1) {
                if (queryStringObject[i].split("=")[1].split("{")[1].split("}")[0] == property) {
                  console.log("replacing!!!", queryStringObject[i].split("=")[1], queryStringObject[i].split("=")[1].replace(/\{(.*?)\}/, e.target.value));
                  id[queryStringObject[i].split("=")[0]] = queryStringObject[i].split("=")[1].replace(/\{(.*?)\}/, e.target.value) || "";
                } else {
                  id[queryStringObject[i].split("=")[0]] = getVal(queryStringObject[i].split("=")[1].split("{")[1].split("}")[0]);
                }
              } else {
                id[queryStringObject[i].split("=")[0]] = queryStringObject[i].split("=")[1];
              }
            }
          }

          _egovCommonUtility.Api.commonApiPost(context, id, {}, false, false, false, "", "", value.isStateLevel).then(function (response) {
            if (response) {
              var keys = _jsonpath2.default.query(response, splitArray[1].split("|")[1]);
              var values = _jsonpath2.default.query(response, splitArray[1].split("|")[2]);
              var dropDownData = [];
              for (var k = 0; k < keys.length; k++) {
                var _obj = {};
                _obj["key"] = keys[k];
                _obj["value"] = values[k];
                dropDownData.push(_obj);
              }

              dropDownData.sort(function (s1, s2) {
                return s1.value < s2.value ? -1 : s1.value > s2.value ? 1 : 0;
              });
              dropDownData.unshift({ key: null, value: "-- Please Select --" });
              setDropDownData(value.jsonPath, dropDownData);
              setDropDownOriginalData(value.jsonPath, response);
            }
          }, function (err) {
            console.log(err);
          });
        } else if (value.type == "textField") {
          try {
            var _object = {};
            if (!value.hasFromDropDownOriginalData) {
              var exp = value.valExp;
              if (dependantIdx) {
                value.jsonPath = replaceLastIdxOnJsonPath(value.jsonPath, dependantIdx);
                exp = exp && exp.replace(/\*/g, dependantIdx);
              }
              _object = {
                target: {
                  value: exp && eval(exp) || eval(eval(value.pattern))
                }
              };
            } else {
              // console.log(dropDownOringalData);
              // console.log(value.pattern);
              // console.log(dropDownOringalData[value.pattern.split("|")[0]][value.pattern.split("|")[1]]);
              var arr = dropDownOringalData[value.pattern.split("|")[0]][value.pattern.split("|")[1]];
              var searchPropery = value.pattern.split("|")[2];
              var propertyRelToDepedant = value.pattern.split("|")[3];
              _object = {
                target: {
                  value: ""
                }
              };
              for (var i = 0; i < arr.length; i++) {
                if (arr[i][searchPropery] == e.target.value) {
                  _object.target.value = arr[i][propertyRelToDepedant];
                }
              }
            }

            handleChange(_object, value.jsonPath, "", "", "", "");
          } catch (ex) {
            console.log('ex', ex);
          }
        } else if (value.type == "autoFill") {
          var _splitArray = value.pattern.split("?");
          var _context = "";
          var _id = {};
          for (var j = 0; j < _splitArray[0].split("/").length; j++) {
            _context += _splitArray[0].split("/")[j] + "/";
          }

          var _queryStringObject = _splitArray[1].split("|")[0].split("&");
          for (var i = 0; i < _queryStringObject.length; i++) {
            if (i) {
              if (_queryStringObject[i].split("=")[1].search("{") > -1) {
                if (_queryStringObject[i].split("=")[1].split("{")[1].split("}")[0] == property) {
                  _id[_queryStringObject[i].split("=")[0]] = e.target.value || "";
                } else {
                  _id[_queryStringObject[i].split("=")[0]] = getVal(_queryStringObject[i].split("=")[1].split("{")[1].split("}")[0]);
                }
              } else {
                _id[_queryStringObject[i].split("=")[0]] = _queryStringObject[i].split("=")[1];
              }
            }
          }

          _egovCommonUtility.Api.commonApiPost(_context, _id).then(function (response) {
            if (response) {
              for (var key in value.autoFillFields) {
                var keyField = key.substr(0, key.lastIndexOf("["));
                var keyLast = key.substr(key.lastIndexOf("]") + 2);
                var propertyCurIndex = property.substr(property.lastIndexOf("[") + 1, 1);
                var newKey = keyField + "[" + propertyCurIndex + "]." + keyLast;
                handleChange({ target: { value: _lodash2.default.get(response, value.autoFillFields[key]) } }, newKey, false, '', '');
              }
            }
          }, function (err) {
            console.log(err);
          });
        } else if (value.type == "radio") {
          if (value.hasFromDropDownOriginalData) {
            var arr = dropDownOringalData[value.pattern.split("|")[0]][value.pattern.split("|")[1]];
            var searchPropery = value.pattern.split("|")[2];
            var propertyRelToDepedant = value.pattern.split("|")[3];
            var object = {
              target: {
                value: ""
              }
            };
            for (var i = 0; i < arr.length; i++) {
              if (arr[i][searchPropery] == e.target.value) {
                object.target.value = arr[i][propertyRelToDepedant];
              }
            }

            console.log(object);

            handleChange(object, value.jsonPath, "", "", "", "");
          }
        }
        // else if (value.type == "documentList") {
        //
        //   let splitArray = value.pattern.split("?");
        //   let context = "";
        //   let id = {};
        //   for (var j = 0; j < splitArray[0].split("/").length; j++) {
        //     context+=splitArray[0].split("/")[j]+"/";
        //   }
        //
        //
        //   let queryStringObject=splitArray[1].split("|")[0].split("&");
        //   for (var i = 0; i < queryStringObject.length; i++) {
        //     if (i) {
        //       if (queryStringObject[i].split("=")[1].search("{")>-1) {
        //         if (queryStringObject[i].split("=")[1].split("{")[1].split("}")[0]==property) {
        //           id[queryStringObject[i].split("=")[0]] = e.target.value || "";
        //         } else {
        //           console.log(queryStringObject[i].split("=")[1].split("{")[1].split("}")[0]);
        //           id[queryStringObject[i].split("=")[0]] = e.target.value;//getVal(queryStringObject[i].split("=")[1].split("{")[1].split("}")[0]);
        //         }
        //       } else {
        //         id[queryStringObject[i].split("=")[0]] = queryStringObject[i].split("=")[1];
        //       }
        //     }
        //   }
        //
        //
        //   Api.commonApiPost(context, id).then(function(response) {
        //     if(response) {
        //       //console.log(item);
        //       var documents = [];
        // 			//console.log(this.props);
        //       //let {documentList, useTimestamp, handler} = props;
        //       for (var k = 0; k < response.length; k++) {
        //
        //         var temp = {
        // 					"fileStoreId": "",
        // 					"displayName": response[k].name,
        // 					"name": ""
        // 				};
        //
        //         documents.push(temp);
        //       }
        //       handleChange({target: {value: documents}}, value.jsonPath, false, '');
        //
        //       //handleChange({target: {value: temp}}, value.jsonPath, false, '', '');
        //     }
        //   },function(err) {
        //       console.log(err);
        //   });
        //   // var arr=dropDownOringalData[value.pattern.split("|")[0]][value.pattern.split("|")[1]];
        //   // var searchPropery=value.pattern.split("|")[2];
        //   // var property=value.pattern.split("|")[3];
        //   //console.log(props,'here');
        //
        // }
        //console.log(value.type);
      });
    };

    _this.handleChange = function (e, property, isRequired, pattern) {
      var requiredErrMsg = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "Required";
      var patternErrMsg = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : "Pattern Missmatch";
      var expression = arguments[6];
      var expErr = arguments[7];
      var isDate = arguments[8];
      var getVal = _this.props.getVal;
      var _this$props10 = _this.props,
          handleChange = _this$props10.handleChange,
          mockData = _this$props10.mockData,
          setDropDownData = _this$props10.setDropDownData,
          formData = _this$props10.formData;

      var hashLocation = window.location.hash;
      var obj = specifications[hashLocation.split("/")[2] + '.' + hashLocation.split("/")[1]];

      if (expression && e.target.value) {
        var str = expression;
        var pos = 0;
        var values = [];
        while (pos < str.length) {
          if (str.indexOf("$", pos) > -1) {
            var ind = str.indexOf("$", pos);
            var spaceInd = str.indexOf(" ", ind) > -1 ? str.indexOf(" ", ind) : str.length - 1;
            var value = str.substr(ind, spaceInd);
            if (value != "$" + property) {
              values.push(value.substr(1));
              str = str.replace(value, "getVal('" + value.substr(1, value.length) + "')");
            } else str = str.replace(value, "e.target.value");
            pos++;
          } else {
            pos++;
          }
        }

        var _flag = 0;
        for (var i = 0; i < values.length; i++) {
          if (!getVal(values[i])) {
            _flag = 1;
          }
        }

        if (isDate && e.target.value && [12, 13].indexOf((e.target.value + "").length) == -1) {
          _flag = 1;
        }

        if (_flag == 0) {
          if (!eval(str)) {
            return _this.props.toggleSnackbarAndSetText(true, (0, _egovCommonUtility.translate)(expErr), false, true);
          }
        }
      }
      _this.checkIfHasShowHideFields(property, e.target.value);
      _this.checkIfHasEnDisFields(property, e.target.value);
      handleChange(e, property, isRequired, pattern, requiredErrMsg, patternErrMsg);
      _this.affectDependants(obj, e, property);
    };

    _this.incrementIndexValue = function (group, jsonPath) {
      var formData = _this.props.formData;

      var length = _lodash2.default.get(formData, jsonPath) ? _lodash2.default.get(formData, jsonPath).length : 0;
      var _group = JSON.stringify(group);
      var regexp = new RegExp(jsonPath + "\\[\\d{1}\\]", "g");
      _group = _group.replace(regexp, jsonPath + "[" + length + "]");
      return JSON.parse(_group);
    };

    _this.getNewSpecs = function (group, updatedSpecs, path) {
      var _this$props11 = _this.props,
          moduleName = _this$props11.moduleName,
          actionName = _this$props11.actionName;

      var groupsArray = _lodash2.default.get(updatedSpecs[moduleName + "." + actionName], path);
      groupsArray.push(group);
      _lodash2.default.set(updatedSpecs[moduleName + "." + actionName], path, groupsArray);
      return updatedSpecs;
    };

    _this.getPath = function (value) {
      var _this$props12 = _this.props,
          mockData = _this$props12.mockData,
          moduleName = _this$props12.moduleName,
          actionName = _this$props12.actionName;

      var getFromGroup = function getFromGroup(groups) {
        for (var i = 0; i < groups.length; i++) {
          if (groups[i].children) {
            for (var j = 0; j < groups[i].children.length; i++) {
              if (groups[i].children[j].jsonPath == value) {
                return "groups[" + i + "].children[" + j + "].groups";
              } else {
                return "groups[" + i + "].children[" + j + "][" + getFromGroup(groups[i].children[j].groups) + "]";
              }
            }
          }
        }
      };

      return getFromGroup(mockData[moduleName + "." + actionName].groups);
    };

    _this.addNewCard = function (group, jsonPath, groupName) {
      var self = _this;
      var _this$props13 = _this.props,
          setMockData = _this$props13.setMockData,
          metaData = _this$props13.metaData,
          moduleName = _this$props13.moduleName,
          actionName = _this$props13.actionName,
          setFormData = _this$props13.setFormData,
          formData = _this$props13.formData,
          addRequiredFields = _this$props13.addRequiredFields;

      var mockData = _extends({}, _this.props.mockData);
      var reqFields = [];
      if (!jsonPath) {
        for (var i = 0; i < metaData[moduleName + "." + actionName].groups.length; i++) {
          if (groupName == metaData[moduleName + "." + actionName].groups[i].name) {
            var _groupToBeInserted = _extends({}, metaData[moduleName + "." + actionName].groups[i]);
            for (var j = mockData[moduleName + "." + actionName].groups.length - 1; j >= 0; j--) {
              if (groupName == mockData[moduleName + "." + actionName].groups[j].name) {
                var regexp = new RegExp(mockData[moduleName + "." + actionName].groups[j].jsonPath.replace(/\[/g, "\\[").replace(/\]/g, "\\]") + "\\[\\d{1}\\]", "g");
                var stringified = JSON.stringify(_groupToBeInserted);
                var ind = mockData[moduleName + "." + actionName].groups[j].index || 0;
                //console.log(ind);
                _groupToBeInserted = JSON.parse(stringified.replace(regexp, mockData[moduleName + "." + actionName].groups[i].jsonPath + "[" + (ind + 1) + "]"));
                _groupToBeInserted.index = ind + 1;

                for (var k = 0; k < _groupToBeInserted.fields.length; k++) {
                  if (_groupToBeInserted.fields[k].isRequired) {
                    reqFields.push(_groupToBeInserted.fields[k].jsonPath);
                  }
                }

                if (reqFields.length) addRequiredFields(reqFields);
                mockData[moduleName + "." + actionName].groups.splice(j + 1, 0, _groupToBeInserted);
                //console.log(mockData[moduleName + "." + actionName].groups);
                setMockData(mockData);
                var temp = _extends({}, formData);
                self.setDefaultValues(mockData[moduleName + "." + actionName].groups, temp);
                //console.log(temp);
                setFormData(temp);
                break;
              }
            }
            break;
          }
        }
      } else {
        group = JSON.parse(JSON.stringify(group));
        //Increment the values of indexes
        var grp = _lodash2.default.get(metaData[moduleName + "." + actionName], self.getPath(jsonPath) + '[0]');
        group = _this.incrementIndexValue(grp, jsonPath);
        //Push to the path
        var updatedSpecs = _this.getNewSpecs(group, JSON.parse(JSON.stringify(mockData)), self.getPath(jsonPath));
        //Create new mock data
        setMockData(updatedSpecs);
      }
    };

    _this.removeCard = function (jsonPath, index, groupName) {
      //Remove at that index and update upper array values
      var _this$props14 = _this.props,
          setMockData = _this$props14.setMockData,
          moduleName = _this$props14.moduleName,
          actionName = _this$props14.actionName,
          setFormData = _this$props14.setFormData,
          delRequiredFields = _this$props14.delRequiredFields;

      var _formData = _extends({}, _this.props.formData);
      var self = _this;
      var mockData = _extends({}, _this.props.mockData);
      var notReqFields = [];

      if (!jsonPath) {
        var ind = 0;
        for (var _i8 = 0; _i8 < mockData[moduleName + "." + actionName].groups.length; _i8++) {
          if (index == _i8 && groupName == mockData[moduleName + "." + actionName].groups[_i8].name) {
            mockData[moduleName + "." + actionName].groups.splice(_i8, 1);
            ind = _i8;
            for (var k = 0; k < mockData[moduleName + "." + actionName].groups[ind].fields.length; k++) {
              if (mockData[moduleName + "." + actionName].groups[ind].fields[k].isRequired) notReqFields.push(mockData[moduleName + "." + actionName].groups[ind].fields[k].jsonPath);
            }
            delRequiredFields(notReqFields);
            break;
          }
        }

        for (var _i9 = ind; _i9 < mockData[moduleName + "." + actionName].groups.length; _i9++) {
          if (mockData[moduleName + "." + actionName].groups[_i9].name == groupName) {
            var regexp = new RegExp(mockData[moduleName + "." + actionName].groups[_i9].jsonPath.replace(/\[/g, "\\[").replace(/\]/g, "\\]") + "\\[\\d{1}\\]", "g");
            //console.log(regexp);
            //console.log(mockData[moduleName + "." + actionName].groups[i].index);
            //console.log(mockData[moduleName + "." + actionName].groups[i].index);
            var stringified = JSON.stringify(mockData[moduleName + "." + actionName].groups[_i9]);
            mockData[moduleName + "." + actionName].groups[_i9] = JSON.parse(stringified.replace(regexp, mockData[moduleName + "." + actionName].groups[_i9].jsonPath + "[" + (mockData[moduleName + "." + actionName].groups[_i9].index - 1) + "]"));

            if (_lodash2.default.get(_formData, mockData[moduleName + "." + actionName].groups[_i9].jsonPath)) {
              var grps = [].concat(_toConsumableArray(_lodash2.default.get(_formData, mockData[moduleName + "." + actionName].groups[_i9].jsonPath)));
              //console.log(mockData[moduleName + "." + actionName].groups[i].index-1);
              //console.log(mockData[moduleName + "." + actionName].groups);
              grps.splice(mockData[moduleName + "." + actionName].groups[_i9].index - 1, 1);
              _lodash2.default.set(_formData, mockData[moduleName + "." + actionName].groups[_i9].jsonPath, grps);
              //console.log(_formData);
              setFormData(_formData);

              //Reduce index values
              for (var _k = ind; _k < mockData[moduleName + "." + actionName].groups.length; _k++) {
                if (mockData[moduleName + "." + actionName].groups[_k].name == groupName) {
                  mockData[moduleName + "." + actionName].groups[_k].index -= 1;
                }
              }
              break;
            }
          }
        }
        //console.log(mockData[moduleName + "." + actionName].groups);
        setMockData(mockData);
      } else {
        var _groups = _lodash2.default.get(mockData[moduleName + "." + actionName], self.getPath(jsonPath));
        _groups.splice(index, 1);
        var regexp = new RegExp("\\[\\d{1}\\]", "g");
        for (var i = index; i < _groups.length; i++) {
          var stringified = JSON.stringify(_groups[i]);
          _groups[i] = JSON.parse(stringified.replace(regexp, "[" + i + "]"));
        }

        _lodash2.default.set(mockData, self.getPath(jsonPath), _groups);
        setMockData(mockData);
      }
    };

    _this.getVal = _this.getVal.bind(_this);
    return _this;
  }

  _createClass(Report, [{
    key: 'setLabelAndReturnRequired',
    value: function setLabelAndReturnRequired(configObject) {
      if (configObject && configObject.groups) {
        for (var i = 0; configObject && i < configObject.groups.length; i++) {
          configObject.groups[i].label = (0, _egovCommonUtility.translate)(configObject.groups[i].label);
          for (var j = 0; j < configObject.groups[i].fields.length; j++) {
            configObject.groups[i].fields[j].label = (0, _egovCommonUtility.translate)(configObject.groups[i].fields[j].label);
            if (configObject.groups[i].fields[j].isRequired && !configObject.groups[i].fields[j].hide && !configObject.groups[i].hide) reqRequired.push(configObject.groups[i].fields[j].jsonPath);
          }

          if (configObject.groups[i].children && configObject.groups[i].children.length) {
            for (var k = 0; k < configObject.groups[i].children.length; k++) {
              this.setLabelAndReturnRequired(configObject.groups[i].children[k]);
            }
          }
        }
      }
    }
  }, {
    key: 'setDefaultValues',
    value: function setDefaultValues(groups, dat) {
      for (var i = 0; i < groups.length; i++) {
        for (var j = 0; j < groups[i].fields.length; j++) {
          if (typeof groups[i].fields[j].defaultValue == 'string' || typeof groups[i].fields[j].defaultValue == 'number' || typeof groups[i].fields[j].defaultValue == 'boolean') {
            _lodash2.default.set(dat, groups[i].fields[j].jsonPath, groups[i].fields[j].defaultValue);
          }
          if (groups[i].children && groups[i].children.length) {
            for (var k = 0; k < groups[i].children.length; k++) {
              this.setDefaultValues(groups[i].children[k].groups, dat);
            }
          }
        }
      }
    }
  }, {
    key: 'depedantValue',
    value: function depedantValue(groups) {
      var self = this;

      var _loop3 = function _loop3(i) {
        var _loop4 = function _loop4(j) {
          if (groups[i].fields[j].depedants && groups[i].fields[j].depedants.length) {
            var _loop5 = function _loop5(_k2) {
              if (groups[i].fields[j].depedants[_k2].type == "dropDown") {
                var splitArray = groups[i].fields[j].depedants[_k2].pattern.split("?");
                var context = "";
                var id = {};
                // id[splitArray[1].split("&")[1].split("=")[0]]=e.target.value;
                for (var p = 0; p < splitArray[0].split("/").length; p++) {
                  context += splitArray[0].split("/")[p] + "/";
                }

                var queryStringObject = splitArray[1].split("|")[0].split("&");
                for (var m = 0; m < queryStringObject.length; m++) {
                  if (m) {
                    if (queryStringObject[m].split("=")[1].search("{") > -1) {
                      id[queryStringObject[m].split("=")[0]] = self.getVal(queryStringObject[m].split("=")[1].split("{")[1].split("}")[0]);
                    } else {
                      id[queryStringObject[m].split("=")[0]] = queryStringObject[m].split("=")[1];
                    }
                  }
                }

                // if(id.categoryId == "" || id.categoryId == null){
                //   formData.tradeSubCategory = "";
                //   setDropDownData(value.jsonPath, []);
                //   console.log(value.jsonPath);
                //   console.log("helo", formData);
                //   return false;
                // }
                _egovCommonUtility.Api.commonApiPost(context, id).then(function (response) {
                  if (response) {

                    var queries = splitArray[1].split("|");
                    var keys = _jsonpath2.default.query(response, queries[1]);
                    var values = _jsonpath2.default.query(response, queries[2]);

                    var others = [];
                    if (queries.length > 3) {
                      for (var _i10 = 3; _i10 < queries.length; _i10++) {
                        others.push(_jsonpath2.default.query(response, queries[_i10]) || undefined);
                      }
                    }

                    var dropDownData = [];
                    for (var t = 0; t < keys.length; t++) {
                      var obj = {};
                      obj["key"] = keys[t];
                      obj["value"] = values[t];

                      if (others && others.length > 0) {
                        var otherItemDatas = [];
                        for (var _i11 = 0; _i11 < others.length; _i11++) {
                          otherItemDatas.push(others[_i11][_k2] || undefined);
                        }
                        obj['others'] = otherItemDatas;
                      }

                      dropDownData.push(obj);
                    }
                    dropDownData.sort(function (s1, s2) {
                      return s1.value < s2.value ? -1 : s1.value > s2.value ? 1 : 0;
                    });
                    dropDownData.unshift({ key: null, value: "-- Please Select --" });
                    self.props.setDropDownData(groups[i].fields[j].depedants[_k2].jsonPath, dropDownData);
                    self.props.setDropDownOriginalData(response, dropDownData);
                  }
                }, function (err) {
                  console.log(err);
                });
              }
            };

            for (var _k2 = 0; _k2 < groups[i].fields[j].depedants.length; _k2++) {
              _loop5(_k2);
            }
          }

          if (groups[i].fields[j].children && groups[i].fields[j].children.length) {
            for (k = 0; k < groups[i].fields[j].children.length; k++) {
              self.depedantValue(groups[i].fields[j].children[k].groups);
            }
          }
        };

        for (var j = 0; j < groups[i].fields.length; j++) {
          _loop4(j);
        }
      };

      for (var i = 0; i < groups.length; i++) {
        var k;

        _loop3(i);
      }
    }
  }, {
    key: 'setInitialUpdateChildData',
    value: function setInitialUpdateChildData(form, children) {
      var _form = JSON.parse(JSON.stringify(form));
      for (var i = 0; i < children.length; i++) {
        for (var j = 0; j < children[i].groups.length; j++) {
          if (children[i].groups[j].multiple) {
            var arr = _lodash2.default.get(_form, children[i].groups[j].jsonPath);
            var ind = j;
            var _stringifiedGroup = JSON.stringify(children[i].groups[j]);
            var regex = new RegExp(children[i].groups[j].jsonPath.replace(/\[/g, "\\[").replace(/\]/g, "\\]") + "\\[\\d{1}\\]", 'g');
            for (var k = 1; k < arr.length; k++) {
              j++;
              children[i].groups[j].groups.splice(ind + 1, 0, JSON.parse(_stringifiedGroup.replace(regex, children[i].groups[ind].jsonPath + "[" + k + "]")));
              children[i].groups[j].groups[ind + 1].index = ind + 1;
            }
          }

          if (children[i].groups[j].children && children[i].groups[j].children.length) {
            this.setInitialUpdateChildData(form, children[i].groups[j].children);
          }
        }
      }
    }
  }, {
    key: 'setInitialUpdateData',
    value: function setInitialUpdateData(form, specs, moduleName, actionName, objectName) {
      var setMockData = this.props.setMockData;

      var _form = JSON.parse(JSON.stringify(form));
      var ind;
      for (var i = 0; i < specs[moduleName + "." + actionName].groups.length; i++) {
        if (specs[moduleName + "." + actionName].groups[i].multiple) {
          var arr = _lodash2.default.get(_form, specs[moduleName + "." + actionName].groups[i].jsonPath);
          console.log('--------');
          console.log(arr, i);
          console.log(specs[moduleName + "." + actionName].groups[i].jsonPath);
          console.log(_form);
          console.log(_lodash2.default.get);
          console.log(specs[moduleName + "." + actionName].groups, i);
          console.log('--------');
          ind = i;
          var _stringifiedGroup = JSON.stringify(specs[moduleName + "." + actionName].groups[i]);
          var regex = new RegExp(specs[moduleName + "." + actionName].groups[i].jsonPath.replace(/\[/g, "\\[").replace(/\]/g, "\\]") + "\\[\\d{1}\\]", 'g');
          for (var j = 1; j < arr.length; j++) {
            i++;
            specs[moduleName + "." + actionName].groups.splice(ind + 1, 0, JSON.parse(_stringifiedGroup.replace(regex, specs[moduleName + "." + actionName].groups[ind].jsonPath + "[" + j + "]")));
            specs[moduleName + "." + actionName].groups[ind + 1].index = j;
          }
        }

        for (var j = 0; j < specs[moduleName + "." + actionName].groups[i].fields.length; j++) {
          if (specs[moduleName + "." + actionName].groups[i].fields[j].showHideFields && specs[moduleName + "." + actionName].groups[i].fields[j].showHideFields.length) {
            for (var k = 0; k < specs[moduleName + "." + actionName].groups[i].fields[j].showHideFields.length; k++) {
              if (specs[moduleName + "." + actionName].groups[i].fields[j].showHideFields[k].ifValue == _lodash2.default.get(form, specs[moduleName + "." + actionName].groups[i].fields[j].jsonPath)) {
                if (specs[moduleName + "." + actionName].groups[i].fields[j].showHideFields[k].hide && specs[moduleName + "." + actionName].groups[i].fields[j].showHideFields[k].hide.length) {
                  for (var a = 0; a < specs[moduleName + "." + actionName].groups[i].fields[j].showHideFields[k].hide.length; a++) {
                    this.hideField(specs, specs[moduleName + "." + actionName].groups[i].fields[j].showHideFields[k].hide[a]);
                  }
                }

                if (specs[moduleName + "." + actionName].groups[i].fields[j].showHideFields[k].show && specs[moduleName + "." + actionName].groups[i].fields[j].showHideFields[k].show.length) {
                  for (var a = 0; a < specs[moduleName + "." + actionName].groups[i].fields[j].showHideFields[k].show.length; a++) {
                    this.showField(specs, specs[moduleName + "." + actionName].groups[i].fields[j].showHideFields[k].show[a]);
                  }
                }
              }
            }
          }
        }

        if (specs[moduleName + "." + actionName].groups[ind || i].children && specs[moduleName + "." + actionName].groups[ind || i].children.length) {
          this.setInitialUpdateChildData(form, specs[moduleName + "." + actionName].groups[ind || i].children);
        }
      }

      setMockData(specs);
    }
  }, {
    key: 'displayUI',
    value: function displayUI(results) {
      var _props = this.props,
          setMetaData = _props.setMetaData,
          setModuleName = _props.setModuleName,
          setActionName = _props.setActionName,
          initForm = _props.initForm,
          setMockData = _props.setMockData,
          setFormData = _props.setFormData;

      var hashLocation = window.location.hash;
      var self = this;

      specifications = typeof results == "string" ? JSON.parse(results) : results;
      var obj = specifications[hashLocation.split("/")[2] + '.' + hashLocation.split("/")[1]];
      reqRequired = [];
      self.setLabelAndReturnRequired(obj);
      initForm(reqRequired);
      setMetaData(specifications);
      setMockData(JSON.parse(JSON.stringify(specifications)));
      setModuleName(hashLocation.split("/")[2]);
      setActionName(hashLocation.split("/")[1]);

      if (hashLocation.split("/").indexOf("update") == 1) {
        var url = specifications[hashLocation.split("/")[2] + '.' + hashLocation.split("/")[1]].searchUrl.split("?")[0];
        var id = self.props.match.params.id && decodeURIComponent(self.props.match.params.id) || self.props.match.params.master;
        var query = _defineProperty({}, specifications[hashLocation.split("/")[2] + '.' + hashLocation.split("/")[1]].searchUrl.split("?")[1].split("=")[0], id);
        //handle 2nd parameter
        if (specifications[hashLocation.split("/")[2] + '.' + hashLocation.split("/")[1]].searchUrl.split("?")[1].split("=")[2]) {
          var _query3;

          var pval = specifications[hashLocation.split("/")[2] + '.' + hashLocation.split("/")[1]].searchUrl.split("?")[1].split("=")[2];
          var pname = specifications[hashLocation.split("/")[2] + '.' + hashLocation.split("/")[1]].searchUrl.split("?")[1].split("=")[1].split('&')[1];

          query = (_query3 = {}, _defineProperty(_query3, specifications[hashLocation.split("/")[2] + '.' + hashLocation.split("/")[1]].searchUrl.split("?")[1].split("=")[0], id), _defineProperty(_query3, pname, pval), _query3);
        }

        if (window.location.href.indexOf("?") > -1) {
          var qs = window.location.href.split("?")[1];
          if (qs && qs.indexOf("=") > -1) {
            qs = qs.indexOf("&") > -1 ? qs.split("&") : [qs];
            for (var i = 0; i < qs.length; i++) {
              query[qs[i].split("=")[0]] = qs[i].split("=")[1];
            }
          }
        }

        self.props.setLoadingStatus('loading');
        _egovCommonUtility.Api.commonApiPost(url, query, {}, false, specifications[hashLocation.split("/")[2] + '.' + hashLocation.split("/")[1]].useTimestamp).then(function (res) {
          self.props.setLoadingStatus('hide');
          if (specifications[hashLocation.split("/")[2] + '.' + hashLocation.split("/")[1]].isResponseArray) {
            var obj = {};
            _lodash2.default.set(obj, specifications[hashLocation.split("/")[2] + '.' + hashLocation.split("/")[1]].objectName, _jsonpath2.default.query(res, "$..[0]")[0]);
            self.props.setFormData(obj);
            self.setInitialUpdateData(obj, JSON.parse(JSON.stringify(specifications)), hashLocation.split("/")[2], hashLocation.split("/")[1], specifications[hashLocation.split("/")[2] + '.' + hashLocation.split("/")[1]].objectName);
          } else {

            self.setInitialUpdateData(res, JSON.parse(JSON.stringify(specifications)), hashLocation.split("/")[2], hashLocation.split("/")[1], specifications[hashLocation.split("/")[2] + '.' + hashLocation.split("/")[1]].objectName);
            self.props.setFormData(res);
          }
          var obj1 = specifications[hashLocation.split("/")[2] + '.' + hashLocation.split("/")[1]];

          self.depedantValue(obj1.groups);
        }, function (err) {
          self.props.setLoadingStatus('hide');
        });
      } else {
        var formData = {};
        if (obj && obj.groups && obj.groups.length) self.setDefaultValues(obj.groups, formData);
        setFormData(formData);
      }

      this.setState({
        pathname: this.props.history.location.pathname
      });
    }
  }, {
    key: 'initData',
    value: function initData() {
      var hash = window.location.hash.split("/");
      var endPoint = "";
      var self = this;

      try {
        if (hash.length == 3 || hash.length == 4 && hash.indexOf("update") > -1) {
          specifications = process.env.NODE_ENV === "production" ? require('egov-' + hash[2] + '/specifications/' + hash[2] + '.specs').default : require('../../' + hash[2] + '/lib/specifications/' + hash[2] + '.specs').default;
        } else {
          specifications = process.env.NODE_ENV === "production" ? require('egov-' + hash[2] + '/specifications/master/' + hash[3] + '.specs').default : require('../../' + hash[2] + '/lib/specifications/master/' + hash[3] + '.specs').default;
        }
      } catch (e) {
        console.log(e);
      }

      self.displayUI(specifications);
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.initData();
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.state.pathname && this.state.pathname != nextProps.history.location.pathname) {
        this.initData();
      }
    }

    //Needs to be changed later for more customfields

  }, {
    key: 'returnPathValueFunction',
    value: function returnPathValueFunction() {}
  }, {
    key: 'render',


    // addNewCard = (group, jsonPath, groupName) => {
    //   let self = this;
    //   let {setMockData, metaData, moduleName, actionName, setFormData, formData} = this.props;
    //   let mockData = {...this.props.mockData};
    //   if(!jsonPath) {
    //     for(var i=0; i<metaData[moduleName + "." + actionName].groups.length; i++) {
    //       if(groupName == metaData[moduleName + "." + actionName].groups[i].name) {
    //         var _groupToBeInserted = {...metaData[moduleName + "." + actionName].groups[i]};
    //         for(var j=(mockData[moduleName + "." + actionName].groups.length-1); j>=0; j--) {
    //           if(groupName == mockData[moduleName + "." + actionName].groups[j].name) {
    //             var regexp = new RegExp(mockData[moduleName + "." + actionName].groups[j].jsonPath.replace(/\[/g, "\\[").replace(/\]/g, "\\]") + "\\[\\d{1}\\]", "g");
    //             var stringified = JSON.stringify(_groupToBeInserted);
    //             var ind = mockData[moduleName + "." + actionName].groups[j].index || 0;
    //             //console.log(ind);
    //             _groupToBeInserted = JSON.parse(stringified.replace(regexp, mockData[moduleName + "." + actionName].groups[i].jsonPath + "[" + (ind+1) + "]"));
    //             _groupToBeInserted.index = ind+1;
    //             mockData[moduleName + "." + actionName].groups.splice(j+1, 0, _groupToBeInserted);
    //             //console.log(mockData[moduleName + "." + actionName].groups);
    //             setMockData(mockData);
    //             var temp = {...formData};
    //             self.setDefaultValues(mockData[moduleName + "." + actionName].groups, temp);
    //             setFormData(temp);
    //             break;
    //           }
    //         }
    //         break;
    //       }
    //     }
    //   } else {
    //     group = JSON.parse(JSON.stringify(group));
    //     //Increment the values of indexes
    //     var grp = _.get(metaData[moduleName + "." + actionName], self.getPath(jsonPath)+ '[0]');
    //     group = this.incrementIndexValue(grp, jsonPath);
    //     //Push to the path
    //     var updatedSpecs = this.getNewSpecs(group, JSON.parse(JSON.stringify(mockData)), self.getPath(jsonPath));
    //     //Create new mock data
    //     setMockData(updatedSpecs);
    //   }
    // }

    // removeCard = (jsonPath, index, groupName) => {
    //   //Remove at that index and update upper array values
    //   let {setMockData, moduleName, actionName, setFormData} = this.props;
    //   let _formData = {...this.props.formData};
    //   let self = this;
    //   let mockData = {...this.props.mockData};
    //
    //   if(!jsonPath) {
    //     var ind = 0;
    //     for(let i=0; i<mockData[moduleName + "." + actionName].groups.length; i++) {
    //       if(index == i && groupName == mockData[moduleName + "." + actionName].groups[i].name) {
    //         mockData[moduleName + "." + actionName].groups.splice(i, 1);
    //         ind = i;
    //         break;
    //       }
    //     }
    //
    //     for(let i=ind; i<mockData[moduleName + "." + actionName].groups.length; i++) {
    //       if(mockData[moduleName + "." + actionName].groups[i].name == groupName) {
    //         var regexp = new RegExp(mockData[moduleName + "." + actionName].groups[i].jsonPath.replace(/\[/g, "\\[").replace(/\]/g, "\\]") + "\\[\\d{1}\\]", "g");
    //         //console.log(regexp);
    //         //console.log(mockData[moduleName + "." + actionName].groups[i].index);
    //         //console.log(mockData[moduleName + "." + actionName].groups[i].index);
    //         var stringified = JSON.stringify(mockData[moduleName + "." + actionName].groups[i]);
    //         mockData[moduleName + "." + actionName].groups[i] = JSON.parse(stringified.replace(regexp, mockData[moduleName + "." + actionName].groups[i].jsonPath + "[" + (mockData[moduleName + "." + actionName].groups[i].index-1) + "]"));
    //
    //         if(_.get(_formData, mockData[moduleName + "." + actionName].groups[i].jsonPath)) {
    //           var grps = [..._.get(_formData, mockData[moduleName + "." + actionName].groups[i].jsonPath)];
    //           //console.log(mockData[moduleName + "." + actionName].groups[i].index-1);
    //           grps.splice((mockData[moduleName + "." + actionName].groups[i].index-1), 1);
    //           //console.log(grps);
    //           _.set(_formData, mockData[moduleName + "." + actionName].groups[i].jsonPath, grps);
    //           //console.log(_formData);
    //           setFormData(_formData);
    //         }
    //       }
    //     }
    //     //console.log(mockData[moduleName + "." + actionName].groups);
    //     setMockData(mockData);
    //   } else {
    //     var _groups = _.get(mockData[moduleName + "." + actionName], self.getPath(jsonPath));
    //     _groups.splice(index, 1);
    //     var regexp = new RegExp("\\[\\d{1}\\]", "g");
    //     for(var i=index; i<_groups.length; i++) {
    //       var stringified = JSON.stringify(_groups[i]);
    //       _groups[i] = JSON.parse(stringified.replace(regexp, "[" + i + "]"));
    //     }
    //
    //     _.set(mockData, self.getPath(jsonPath), _groups);
    //     setMockData(mockData);
    //     }
    // }

    value: function render() {
      var _this2 = this;

      var _props2 = this.props,
          mockData = _props2.mockData,
          moduleName = _props2.moduleName,
          actionName = _props2.actionName,
          formData = _props2.formData,
          fieldErrors = _props2.fieldErrors,
          isFormValid = _props2.isFormValid;
      var create = this.create,
          handleChange = this.handleChange,
          getVal = this.getVal,
          addNewCard = this.addNewCard,
          removeCard = this.removeCard,
          autoComHandler = this.autoComHandler,
          initiateWF = this.initiateWF;

      //let isUpdateDataFetched = actionName==='update'? !_.isEmpty(formData) : true;

      return _react2.default.createElement(
        'div',
        { className: 'Report' },
        _react2.default.createElement(
          _reactBootstrap.Row,
          null,
          _react2.default.createElement(
            _reactBootstrap.Col,
            { xs: 6, md: 6 },
            _react2.default.createElement(
              'h3',
              { style: { paddingLeft: 15, "marginBottom": "0" } },
              !_lodash2.default.isEmpty(mockData) && moduleName && actionName && mockData[moduleName + '.' + actionName] && mockData[moduleName + '.' + actionName].title ? (0, _egovCommonUtility.translate)(mockData[moduleName + '.' + actionName].title) : ""
            )
          ),
          _react2.default.createElement(
            _reactBootstrap.Col,
            { xs: 6, md: 6 },
            _react2.default.createElement(
              'div',
              { style: { "textAlign": "right", "color": "#FF0000", "marginTop": "15px", "marginRight": "15px", "paddingTop": "8px" } },
              _react2.default.createElement(
                'i',
                null,
                '( * ) ',
                (0, _egovCommonUtility.translate)("framework.required.note")
              )
            )
          )
        ),
        actionName == "update" && _react2.default.createElement(_UiBackButton2.default, null),
        _react2.default.createElement(
          'form',
          { onSubmit: function onSubmit(e) {
              create(e);
            } },
          !_lodash2.default.isEmpty(mockData) && moduleName && actionName && mockData[moduleName + '.' + actionName] && _react2.default.createElement(_showFields2.default, {
            groups: mockData[moduleName + '.' + actionName].groups,
            noCols: mockData[moduleName + '.' + actionName].numCols,
            ui: 'google',
            handler: handleChange,
            getVal: getVal,
            fieldErrors: fieldErrors,
            useTimestamp: mockData[moduleName + '.' + actionName].useTimestamp || false,
            addNewCard: addNewCard,
            removeCard: removeCard,
            autoComHandler: autoComHandler,
            initiateWF: initiateWF,
            screen: window.location.hash.split("/").indexOf("update") == 1 ? "update" : "create",
            workflowId: window.location.hash.split("/").indexOf("update") == 1 ? this.props.match.params.id && decodeURIComponent(this.props.match.params.id) || this.props.match.params.master : ""
          }),
          _react2.default.createElement(
            'div',
            { style: { "textAlign": "center" } },
            _react2.default.createElement('br', null),
            actionName == "create" && _react2.default.createElement(_UiButton2.default, { item: { "label": "Create", "uiType": "submit", "isDisabled": isFormValid ? false : true }, ui: 'google' }),
            actionName == "update" && _react2.default.createElement(_UiButton2.default, { item: { "label": "Update", "uiType": "submit", "isDisabled": isFormValid ? false : true }, ui: 'google' }),
            '\xA0\xA0',
            _react2.default.createElement(_RaisedButton2.default, { label: 'Reset', primary: false, onClick: function onClick() {
                _this2.initData();
              } }),
            _react2.default.createElement('br', null)
          )
        )
      );
    }
  }]);

  return Report;
}(_react.Component);

var mapStateToProps = function mapStateToProps(state) {
  return {
    metaData: state.framework.metaData,
    mockData: state.framework.mockData,
    moduleName: state.framework.moduleName,
    actionName: state.framework.actionName,
    formData: state.frameworkForm.form,
    fieldErrors: state.frameworkForm.fieldErrors,
    isFormValid: state.frameworkForm.isFormValid,
    requiredFields: state.frameworkForm.requiredFields,
    dropDownData: state.framework.dropDownData,
    dropDownOringalData: state.framework.dropDownOringalData
  };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    initForm: function initForm(requiredFields) {
      dispatch({
        type: "SET_REQUIRED_FIELDS",
        requiredFields: requiredFields
      });
    },
    setMetaData: function setMetaData(metaData) {
      dispatch({ type: "SET_META_DATA", metaData: metaData });
    },
    setMockData: function setMockData(mockData) {
      dispatch({ type: "SET_MOCK_DATA", mockData: mockData });
    },
    setFormData: function setFormData(data) {
      dispatch({ type: "SET_FORM_DATA", data: data });
    },
    setModuleName: function setModuleName(moduleName) {
      dispatch({ type: "SET_MODULE_NAME", moduleName: moduleName });
    },
    setActionName: function setActionName(actionName) {
      dispatch({ type: "SET_ACTION_NAME", actionName: actionName });
    },
    handleChange: function handleChange(e, property, isRequired, pattern, requiredErrMsg, patternErrMsg) {
      dispatch({ type: "HANDLE_CHANGE_FRAMEWORK", property: property, value: e.target.value, isRequired: isRequired, pattern: pattern, requiredErrMsg: requiredErrMsg, patternErrMsg: patternErrMsg });
    },
    setLoadingStatus: function setLoadingStatus(loadingStatus) {
      dispatch({ type: "SET_LOADING_STATUS", loadingStatus: loadingStatus });
    },
    toggleSnackbarAndSetText: function toggleSnackbarAndSetText(snackbarState, toastMsg, isSuccess, isError) {
      dispatch({ type: "TOGGLE_SNACKBAR_AND_SET_TEXT", snackbarState: snackbarState, toastMsg: toastMsg, isSuccess: isSuccess, isError: isError });
    },
    setDropDownData: function setDropDownData(fieldName, dropDownData) {
      dispatch({ type: "SET_DROPDWON_DATA", fieldName: fieldName, dropDownData: dropDownData });
    },
    setDropDownOriginalData: function setDropDownOriginalData(fieldName, dropDownData) {
      dispatch({ type: "SET_ORIGINAL_DROPDWON_DATA", fieldName: fieldName, dropDownData: dropDownData });
    },
    setRoute: function setRoute(route) {
      return dispatch({ type: "SET_ROUTE", route: route });
    },
    delRequiredFields: function delRequiredFields(requiredFields) {
      dispatch({ type: "DEL_REQUIRED_FIELDS", requiredFields: requiredFields });
    },
    addRequiredFields: function addRequiredFields(requiredFields) {
      dispatch({ type: "ADD_REQUIRED_FIELDS", requiredFields: requiredFields });
    },
    removeFieldErrors: function removeFieldErrors(key) {
      dispatch({ type: "REMOVE_FROM_FIELD_ERRORS", key: key });
    }
  };
};

exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Report);