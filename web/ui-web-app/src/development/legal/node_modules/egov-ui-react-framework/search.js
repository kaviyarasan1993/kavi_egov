'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

var _RaisedButton = require('material-ui/RaisedButton');

var _RaisedButton2 = _interopRequireDefault(_RaisedButton);

var _reactBootstrap = require('react-bootstrap');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _showFields = require('./showFields');

var _showFields2 = _interopRequireDefault(_showFields);

var _egovCommonUtility = require('egov-common-utility');

var _UiButton = require('./components/UiButton');

var _UiButton2 = _interopRequireDefault(_UiButton);

var _UiDynamicTable = require('./components/UiDynamicTable');

var _UiDynamicTable2 = _interopRequireDefault(_UiDynamicTable);

var _utility = require('./utility/utility');

var _UiTable = require('./components/UiTable');

var _UiTable2 = _interopRequireDefault(_UiTable);

var _jsonpath = require('jsonpath');

var _jsonpath2 = _interopRequireDefault(_jsonpath);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var specifications = {};

var reqRequired = [];

var Search = function (_Component) {
  _inherits(Search, _Component);

  function Search(props) {
    _classCallCheck(this, Search);

    var _this = _possibleConstructorReturn(this, (Search.__proto__ || Object.getPrototypeOf(Search)).call(this, props));

    _this.state = {
      pathname: ""
    };

    _this.getVal = function (path) {
      return typeof _lodash2.default.get(_this.props.formData, path) != "undefined" ? _lodash2.default.get(_this.props.formData, path) : "";
    };

    _this.search = function () {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var hasDefaultSearch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (e) {
        e.preventDefault();
      }

      var self = _this;
      self.props.setLoadingStatus('loading');
      var formData = _extends({}, _this.props.formData);
      if (hasDefaultSearch) {
        formData = JSON.parse(window.localStorage.getItem("formData"));
        _this.props.setFormData(formData);
      }
      for (var key in formData) {
        if (formData[key] == "" || typeof formData[key] == "undefined") delete formData[key];
      }

      var specifications = JSON.parse(window.localStorage.getItem("specifications"));
      var currentSpecification = specifications[self.props.match.params.moduleName + '.' + self.props.match.path.split("/")[1]];
      var getVal = self.getVal,
          getValFromDropdownData = self.getValFromDropdownData;


      _egovCommonUtility.Api.commonApiPost(currentSpecification.url, formData, {}, null, currentSpecification.useTimestamp).then(function (res) {
        self.props.setLoadingStatus('hide');
        var result = currentSpecification.result;

        var resultList = {
          resultHeader: [{ label: "#" }].concat(_toConsumableArray(result.header)),
          resultValues: [],
          disableRowClick: result.disableRowClick || false
        };
        var specsValuesList = currentSpecification.result.values;
        var values = _lodash2.default.get(res, currentSpecification.result.resultPath);
        if (values && values.length) {
          for (var i = 0; i < values.length; i++) {
            var tmp = [i + 1];
            for (var j = 0; j < specsValuesList.length; j++) {
              var valuePath = specsValuesList[j];
              if ((typeof valuePath === 'undefined' ? 'undefined' : _typeof(valuePath)) === 'object' && valuePath.valExp) {
                tmp.push(eval(valuePath.valExp));
                continue;
              }
              if ((typeof valuePath === 'undefined' ? 'undefined' : _typeof(valuePath)) === 'object' && valuePath.isObj) {
                var childArray = [];
                if (valuePath.childArray && valuePath.childArray.length > 0) {
                  for (var k = 0; k < valuePath.childArray.length; k++) {
                    childArray.push(_lodash2.default.get(values[i], valuePath.childArray[k]));
                  }
                }

                tmp.push(childArray);
                continue;
              }
              // if ((resultList.resultHeader[j].label.search("Date")>-1 || resultList.resultHeader[j].label.search("date")>-1)  && !(specsValuesList[j].search("-")>-1)) {
              //   tmp.push(new Date(_.get(values[i],specsValuesList[j])).getDate()+"/"+new Date(_.get(values[i],specsValuesList[j])).getMonth()+"/"+new Date(_.get(values[i],specsValuesList[j])).getFullYear());
              // } else {
              tmp.push(_lodash2.default.get(values[i], valuePath));
              // }
            }
            resultList.resultValues.push(tmp);
          }
        }
        if (result.isAction) {
          resultList.actionItems = result.actionItems;
        }
        self.setState({
          resultList: resultList,
          values: values,
          showResult: true
        });

        self.props.setFlag(1);

        window.localStorage.setItem("formData", "");
        window.localStorage.setItem("returnUrl", "");
      }, function (err) {
        self.props.toggleSnackbarAndSetText(true, err.message, false, true);
        self.props.setLoadingStatus('hide');
      });
    };

    _this.getVal = function (path) {
      return _lodash2.default.get(_this.props.formData, path) || "";
    };

    _this.getValFromDropdownData = function (fieldJsonPath, key, path) {
      var dropdownData = _this.props.dropDownData[fieldJsonPath] || [];
      var _val = _lodash2.default.get(dropdownData.find(function (data) {
        return data.key == key;
      }) || [], path);
      return typeof _val != "undefined" ? _val : "";
    };

    _this.hideField = function (_mockData, hideObject, reset) {
      var _this$props = _this.props,
          moduleName = _this$props.moduleName,
          actionName = _this$props.actionName,
          setFormData = _this$props.setFormData,
          delRequiredFields = _this$props.delRequiredFields,
          removeFieldErrors = _this$props.removeFieldErrors,
          addRequiredFields = _this$props.addRequiredFields;

      var _formData = _extends({}, _this.props.formData);
      if (hideObject.isField) {
        for (var i = 0; i < _mockData[moduleName + "." + actionName].groups.length; i++) {
          for (var _j = 0; _j < _mockData[moduleName + "." + actionName].groups[i].fields.length; _j++) {
            if (hideObject.name == _mockData[moduleName + "." + actionName].groups[i].fields[_j].name) {
              _mockData[moduleName + "." + actionName].groups[i].fields[_j].hide = reset ? false : true;
              if (!reset) {
                _lodash2.default.set(_formData, _mockData[moduleName + "." + actionName].groups[i].fields[_j].jsonPath, '');
                setFormData(_formData);
                //Check if required is true, if yes remove from required fields
                if (_mockData[moduleName + "." + actionName].groups[i].fields[_j].isRequired) {
                  delRequiredFields([_mockData[moduleName + "." + actionName].groups[i].fields[_j].jsonPath]);
                  removeFieldErrors(_mockData[moduleName + "." + actionName].groups[i].fields[_j].jsonPath);
                }
              } else if (_mockData[moduleName + "." + actionName].groups[i].fields[_j].isRequired) {
                addRequiredFields([_mockData[moduleName + "." + actionName].groups[i].fields[_j].jsonPath]);
              }

              break;
            }
          }
        }
      } else {
        var flag = 0;
        for (var _i = 0; _i < _mockData[moduleName + "." + actionName].groups.length; _i++) {
          if (hideObject.name == _mockData[moduleName + "." + actionName].groups[_i].name) {
            flag = 1;
            _mockData[moduleName + "." + actionName].groups[_i].hide = reset ? false : true;
            if (!reset) {
              var _rReq = [];
              for (var j = 0; j < _mockData[moduleName + "." + actionName].groups[_i].fields.length; j++) {
                _lodash2.default.set(_formData, _mockData[moduleName + "." + actionName].groups[_i].fields[j].jsonPath, '');
                if (_mockData[moduleName + "." + actionName].groups[_i].fields[j].isRequired) {
                  _rReq.push(_mockData[moduleName + "." + actionName].groups[_i].fields[j].jsonPath);
                  removeFieldErrors(_mockData[moduleName + "." + actionName].groups[_i].fields[j].jsonPath);
                }
              }
              delRequiredFields(_rReq);
              setFormData(_formData);
            } else {
              var _rReq = [];
              for (var j = 0; j < _mockData[moduleName + "." + actionName].groups[_i].fields.length; j++) {
                if (_mockData[moduleName + "." + actionName].groups[_i].fields[j].isRequired) _rReq.push(_mockData[moduleName + "." + actionName].groups[_i].fields[j].jsonPath);
              }
              addRequiredFields(_rReq);
            }
            break;
          }
        }

        if (flag == 0) {
          for (var _i2 = 0; _i2 < _mockData[moduleName + "." + actionName].groups.length; _i2++) {
            if (_mockData[moduleName + "." + actionName].groups[_i2].children && _mockData[moduleName + "." + actionName].groups[_i2].children.length) {
              for (var _j2 = 0; _j2 < _mockData[moduleName + "." + actionName].groups[_i2].children.length; _j2++) {
                for (var k = 0; k < _mockData[moduleName + "." + actionName].groups[_i2].children[_j2].groups.length; k++) {
                  if (hideObject.name == _mockData[moduleName + "." + actionName].groups[_i2].children[_j2].groups[k].name) {
                    _mockData[moduleName + "." + actionName].groups[_i2].children[_j2].groups[k].hide = reset ? false : true;
                    if (!reset) {
                      var _rReq = [];
                      for (var a = 0; a < _mockData[moduleName + "." + actionName].groups[_i2].children[_j2].groups[k].fields.length; a++) {
                        _lodash2.default.set(_formData, _mockData[moduleName + "." + actionName].groups[_i2].children[_j2].groups[k].fields[a].jsonPath, '');
                        if (_mockData[moduleName + "." + actionName].groups[_i2].children[_j2].groups[k].fields[a].isRequired) {
                          _rReq.push(_mockData[moduleName + "." + actionName].groups[_i2].children[_j2].groups[k].fields[a].jsonPath);
                          removeFieldErrors(_mockData[moduleName + "." + actionName].groups[_i2].children[_j2].groups[k].fields[a].jsonPath);
                        }
                      }
                      delRequiredFields(_rReq);
                      setFormData(_formData);
                    } else {
                      var _rReq = [];
                      for (var _a = 0; _a < _mockData[moduleName + "." + actionName].groups[_i2].children[_j2].groups[k].fields.length; _a++) {
                        if (_mockData[moduleName + "." + actionName].groups[_i2].children[_j2].groups[k].fields[_a].isRequired) _rReq.push(_mockData[moduleName + "." + actionName].groups[_i2].children[_j2].groups[k].fields[_a].jsonPath);
                      }
                      addRequiredFields(_rReq);
                    }
                  }
                }
              }
            }
          }
        }
      }

      return _mockData;
    };

    _this.showField = function (_mockData, showObject, reset) {
      var _this$props2 = _this.props,
          moduleName = _this$props2.moduleName,
          actionName = _this$props2.actionName,
          setFormData = _this$props2.setFormData,
          delRequiredFields = _this$props2.delRequiredFields,
          removeFieldErrors = _this$props2.removeFieldErrors,
          addRequiredFields = _this$props2.addRequiredFields;

      var _formData = _extends({}, _this.props.formData);
      if (showObject.isField) {
        for (var i = 0; i < _mockData[moduleName + "." + actionName].groups.length; i++) {
          for (var _j3 = 0; _j3 < _mockData[moduleName + "." + actionName].groups[i].fields.length; _j3++) {
            if (showObject.name == _mockData[moduleName + "." + actionName].groups[i].fields[_j3].name) {
              _mockData[moduleName + "." + actionName].groups[i].fields[_j3].hide = reset ? true : false;
              if (!reset) {
                _lodash2.default.set(_formData, _mockData[moduleName + "." + actionName].groups[i].fields[_j3].jsonPath, '');
                setFormData(_formData);
                if (_mockData[moduleName + "." + actionName].groups[i].fields[_j3].isRequired) {
                  addRequiredFields([_mockData[moduleName + "." + actionName].groups[i].fields[_j3].jsonPath]);
                }
              } else if (_mockData[moduleName + "." + actionName].groups[i].fields[_j3].isRequired) {
                delRequiredFields([_mockData[moduleName + "." + actionName].groups[i].fields[_j3].jsonPath]);
                removeFieldErrors(_mockData[moduleName + "." + actionName].groups[i].fields[_j3].jsonPath);
              }
              break;
            }
          }
        }
      } else {
        var flag = 0;
        for (var _i3 = 0; _i3 < _mockData[moduleName + "." + actionName].groups.length; _i3++) {
          if (showObject.name == _mockData[moduleName + "." + actionName].groups[_i3].name) {
            flag = 1;
            _mockData[moduleName + "." + actionName].groups[_i3].hide = reset ? true : false;
            if (!reset) {
              var _rReq = [];
              for (var j = 0; j < _mockData[moduleName + "." + actionName].groups[_i3].fields.length; j++) {
                _lodash2.default.set(_formData, _mockData[moduleName + "." + actionName].groups[_i3].fields[j].jsonPath, '');
                if (_mockData[moduleName + "." + actionName].groups[_i3].fields[j].isRequired) _rReq.push(_mockData[moduleName + "." + actionName].groups[_i3].fields[j].jsonPath);
              }

              addRequiredFields(_rReq);
              setFormData(_formData);
            } else {
              var _rReq = [];
              for (var j = 0; j < _mockData[moduleName + "." + actionName].groups[_i3].fields.length; j++) {
                if (_mockData[moduleName + "." + actionName].groups[_i3].fields[j].isRequired) {
                  _rReq.push(_mockData[moduleName + "." + actionName].groups[_i3].fields[j].jsonPath);
                  removeFieldErrors(_mockData[moduleName + "." + actionName].groups[_i3].fields[j].jsonPath);
                }
              }

              if (_mockData[moduleName + "." + actionName].groups[_i3].children && _mockData[moduleName + "." + actionName].groups[_i3].children.length) {
                for (var z = 0; z < _mockData[moduleName + "." + actionName].groups[_i3].children.length; z++) {
                  for (var y = 0; y < _mockData[moduleName + "." + actionName].groups[_i3].children[z].groups.length; y++) {
                    for (var x = 0; x < _mockData[moduleName + "." + actionName].groups[_i3].children[z].groups[y].fields.length; x++) {
                      if (_mockData[moduleName + "." + actionName].groups[_i3].children[z].groups[y].fields[x].isRequired) {
                        _rReq.push(_mockData[moduleName + "." + actionName].groups[_i3].children[z].groups[y].fields[x].jsonPath);
                        removeFieldErrors(_mockData[moduleName + "." + actionName].groups[_i3].children[z].groups[y].fields[x].jsonPath);
                      }
                    }
                  }
                }
              }

              delRequiredFields(_rReq);
            }
            break;
          }
        }

        if (flag == 0) {
          for (var _i4 = 0; _i4 < _mockData[moduleName + "." + actionName].groups.length; _i4++) {
            if (_mockData[moduleName + "." + actionName].groups[_i4].children && _mockData[moduleName + "." + actionName].groups[_i4].children.length) {
              for (var _j4 = 0; _j4 < _mockData[moduleName + "." + actionName].groups[_i4].children.length; _j4++) {
                for (var k = 0; k < _mockData[moduleName + "." + actionName].groups[_i4].children[_j4].groups.length; k++) {
                  if (showObject.name == _mockData[moduleName + "." + actionName].groups[_i4].children[_j4].groups[k].name) {
                    _mockData[moduleName + "." + actionName].groups[_i4].children[_j4].groups[k].hide = reset ? true : false;
                    /*if(!reset) {
                     } else {
                     }*/
                  }
                }
              }
            }
          }
        }
      }

      return _mockData;
    };

    _this.checkIfHasShowHideFields = function (jsonPath, val) {
      var _mockData = _extends({}, _this.props.mockData);
      var _this$props3 = _this.props,
          moduleName = _this$props3.moduleName,
          actionName = _this$props3.actionName,
          setMockData = _this$props3.setMockData;

      for (var i = 0; i < _mockData[moduleName + "." + actionName].groups.length; i++) {
        for (var j = 0; j < _mockData[moduleName + "." + actionName].groups[i].fields.length; j++) {
          if (jsonPath == _mockData[moduleName + "." + actionName].groups[i].fields[j].jsonPath && _mockData[moduleName + "." + actionName].groups[i].fields[j].showHideFields && _mockData[moduleName + "." + actionName].groups[i].fields[j].showHideFields.length) {
            for (var k = 0; k < _mockData[moduleName + "." + actionName].groups[i].fields[j].showHideFields.length; k++) {
              if (val == _mockData[moduleName + "." + actionName].groups[i].fields[j].showHideFields[k].ifValue) {
                for (var y = 0; y < _mockData[moduleName + "." + actionName].groups[i].fields[j].showHideFields[k].hide.length; y++) {
                  _mockData = _this.hideField(_mockData, _mockData[moduleName + "." + actionName].groups[i].fields[j].showHideFields[k].hide[y]);
                }

                for (var z = 0; z < _mockData[moduleName + "." + actionName].groups[i].fields[j].showHideFields[k].show.length; z++) {
                  _mockData = _this.showField(_mockData, _mockData[moduleName + "." + actionName].groups[i].fields[j].showHideFields[k].show[z]);
                }
              } else {
                for (var _y = 0; _y < _mockData[moduleName + "." + actionName].groups[i].fields[j].showHideFields[k].hide.length; _y++) {
                  _mockData = _this.hideField(_mockData, _mockData[moduleName + "." + actionName].groups[i].fields[j].showHideFields[k].hide[_y], true);
                }

                for (var _z = 0; _z < _mockData[moduleName + "." + actionName].groups[i].fields[j].showHideFields[k].show.length; _z++) {
                  _mockData = _this.showField(_mockData, _mockData[moduleName + "." + actionName].groups[i].fields[j].showHideFields[k].show[_z], true);
                }
              }
            }
          }
        }
      }

      setMockData(_mockData);
    };

    _this.handleChange = function (e, property, isRequired, pattern) {
      var requiredErrMsg = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "Required";
      var patternErrMsg = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : "Pattern Missmatch";
      var getVal = _this.getVal;
      var _this$props4 = _this.props,
          handleChange = _this$props4.handleChange,
          mockData = _this$props4.mockData,
          setDropDownData = _this$props4.setDropDownData;

      var hashLocation = window.location.hash;
      var obj = specifications[hashLocation.split("/")[2] + '.' + hashLocation.split("/")[1]];
      // console.log(obj);
      var depedants = _jsonpath2.default.query(obj, '$.groups..fields[?(@.jsonPath=="' + property + '")].depedants.*');
      _this.checkIfHasShowHideFields(property, e.target.value);
      handleChange(e, property, isRequired, pattern, requiredErrMsg, patternErrMsg);

      _lodash2.default.forEach(depedants, function (value, key) {
        if (value.type == "dropDown") {
          if (e.target.value) {
            var splitArray = value.pattern.split("?");
            var context = "";
            var id = {};
            // id[splitArray[1].split("&")[1].split("=")[0]]=e.target.value;
            for (var j = 0; j < splitArray[0].split("/").length; j++) {
              context += splitArray[0].split("/")[j] + "/";
            }

            var queryStringObject = splitArray[1].split("|")[0].split("&");
            for (var i = 0; i < queryStringObject.length; i++) {
              if (i) {
                // if(queryStringObject[i].split("=")[1].startsWith("^")){
                //   id[queryStringObject[i].split("=")[0]]=queryStringObject[i].split("=")[1].replace(/\^/, "");
                //   continue;
                // }
                if (queryStringObject[i].split("=")[1].search("{") > -1) {
                  if (queryStringObject[i].split("=")[1].split("{")[1].split("}")[0] == property) {
                    console.log("replacing!!!", queryStringObject[i].split("=")[1], queryStringObject[i].split("=")[1].replace(/\{(.*?)\}/, e.target.value));
                    id[queryStringObject[i].split("=")[0]] = queryStringObject[i].split("=")[1].replace(/\{(.*?)\}/, e.target.value) || "";
                  } else {
                    id[queryStringObject[i].split("=")[0]] = getVal(queryStringObject[i].split("=")[1].split("{")[1].split("}")[0]);
                  }
                } else {
                  id[queryStringObject[i].split("=")[0]] = queryStringObject[i].split("=")[1];
                }
              }
            }

            _egovCommonUtility.Api.commonApiPost(context, id).then(function (response) {
              if (response) {
                var keys = _jsonpath2.default.query(response, splitArray[1].split("|")[1]);
                var values = _jsonpath2.default.query(response, splitArray[1].split("|")[2]);
                var dropDownData = [];
                for (var k = 0; k < keys.length; k++) {
                  var _obj = {};
                  _obj["key"] = keys[k];
                  _obj["value"] = values[k];
                  dropDownData.push(_obj);
                }

                dropDownData.sort(function (s1, s2) {
                  return s1.value < s2.value ? -1 : s1.value > s2.value ? 1 : 0;
                });
                dropDownData.unshift({ key: null, value: "-- Please Select --" });
                setDropDownData(value.jsonPath, dropDownData);
              }
            }, function (err) {
              console.log(err);
            });
            // console.log(id);
            // console.log(context);
          } else {
            setDropDownData(value.jsonPath, []);
          }
        } else if (value.type == "textField") {
          var object = {
            target: {
              value: eval(eval(value.pattern))
            }
          };
          handleChange(object, value.jsonPath, value.isRequired, value.rg, value.requiredErrMsg, value.patternErrMsg);
        }
      });
    };

    _this.rowButtonClickHandler = function (buttonUrl, id) {
      if (id) {
        _this.props.setRoute(buttonUrl + id);
      } else {
        var selectedRecordId = _this.state.selectedRecordId;

        if (selectedRecordId) {
          _this.props.setRoute(buttonUrl + selectedRecordId);
        }
      }
    };

    _this.rowCheckboxClickHandler = function (code) {
      _this.setState({
        selectedRecordId: code
      });
    };

    _this.rowClickHandler = function (index) {
      var formData = _this.props.formData;

      var value = _this.state.values[index];
      var _url = window.location.hash.split("/").indexOf("update") > -1 ? _this.props.metaData[_this.props.moduleName + '.' + _this.props.actionName].result.rowClickUrlUpdate : _this.props.metaData[_this.props.moduleName + '.' + _this.props.actionName].result.rowClickUrlView;

      //======================Check if direct URL or array====================>>
      if ((typeof _url === 'undefined' ? 'undefined' : _typeof(_url)) == 'object') {
        var isMatchFound = false;
        for (var i = 0; i < _url.multiple.length; i++) {
          var _key = _url.multiple[i].ifValue.split("=")[0];
          var _value = _url.multiple[i].ifValue.split("=")[1];
          if (_lodash2.default.get(value, _key) === _value) {
            _url = _url.multiple[i].goto;
            isMatchFound = true;
            break;
          }
        }
        if (!isMatchFound) _url = _url.default;
      }

      console.log(formData);
      localStorage.setItem("formData", JSON.stringify(formData));
      localStorage.setItem("returnUrl", window.location.hash.split("#/")[1]);

      //======================================================================>>
      if (_url.indexOf("?") > -1) {
        var url = _url.split("?")[0];
        var query = _url.split("?")[1];
        var params = query.indexOf("&") > -1 ? query.split("&") : [query];
        var queryString = "?";
        for (var i = 0; i < params.length; i++) {
          queryString += (i > 0 ? '&' : '') + params[i].split("=")[0] + "=" + (/\{/.test(params[i]) ? encodeURIComponent(_lodash2.default.get(value, params[i].split("=")[1].split("{")[1].split("}")[0])) : params[i].split("=")[1]);
        }
        var key = url.split("{")[1].split("}")[0];
        url = url.replace("{" + key + "}", encodeURIComponent(_lodash2.default.get(value, key)));
        _this.props.setRoute(url + queryString);
      } else {
        var key = _url.split("{")[1].split("}")[0];
        _url = _url.replace("{" + key + "}", encodeURIComponent(_lodash2.default.get(value, key)));
        _this.props.setRoute(_url);
      }
    };

    _this.resetForm = function () {
      var _this$props5 = _this.props,
          moduleName = _this$props5.moduleName,
          actionName = _this$props5.actionName,
          metaData = _this$props5.metaData,
          setFormData = _this$props5.setFormData;

      var obj = metaData[moduleName + '.' + actionName];
      var formData = {};
      if (obj && obj.groups && obj.groups.length) _this.setDefaultValues(obj.groups, formData);
      setFormData(formData);
      _this.setState({
        pathname: _this.props.history.location.pathname,
        showResult: false
      });
    };

    _this.state = {
      showResult: false,
      resultList: {
        resultHeader: [],
        resultValues: [],
        disableRowClick: false
      },
      values: [],
      selectedRecordId: ""
    };
    return _this;
  }

  _createClass(Search, [{
    key: 'setLabelAndReturnRequired',
    value: function setLabelAndReturnRequired(configObject) {
      if (configObject && configObject.groups) {
        for (var i = 0; i < configObject.groups.length; i++) {
          configObject.groups[i].label = (0, _egovCommonUtility.translate)(configObject.groups[i].label);
          for (var j = 0; j < configObject.groups[i].fields.length; j++) {
            configObject.groups[i].fields[j].label = (0, _egovCommonUtility.translate)(configObject.groups[i].fields[j].label);
            if (configObject.groups[i].fields[j].isRequired && !configObject.groups[i].fields[j].hide && !configObject.groups[i].hide) reqRequired.push(configObject.groups[i].fields[j].jsonPath);
          }

          if (configObject.groups[i].children && configObject.groups[i].children.length) {
            for (var k = 0; k < configObject.groups[i].children.length; k++) {
              this.setLabelAndReturnRequired(configObject.groups[i].children[k]);
            }
          }
        }
      }
    }
  }, {
    key: 'setDefaultValues',
    value: function setDefaultValues(groups, dat) {
      for (var i = 0; i < groups.length; i++) {
        for (var j = 0; j < groups[i].fields.length; j++) {
          if (typeof groups[i].fields[j].defaultValue == 'string' || typeof groups[i].fields[j].defaultValue == 'number' || typeof groups[i].fields[j].defaultValue == 'boolean') {
            //console.log(groups[i].fields[j].name + "--" + groups[i].fields[j].defaultValue);
            _lodash2.default.set(dat, groups[i].fields[j].jsonPath, groups[i].fields[j].defaultValue);
          }

          if (groups[i].fields[j].children && groups[i].fields[j].children.length) {
            for (var k = 0; k < groups[i].fields[j].children.length; k++) {
              this.setDefaultValues(groups[i].fields[j].children[k].groups);
            }
          }
        }
      }
    }
  }, {
    key: 'initData',
    value: function initData() {

      var hashLocation = window.location.hash;
      try {
        var hash = window.location.hash.split("/");
        if (hash.length == 4 && hashLocation.split("/")[1] != "transaction") {
          specifications = process.env.NODE_ENV === "production" ? require('egov-' + hash[2] + '/specifications/' + hash[2] + '.specs').default : require('../../' + hash[2] + '/lib/specifications/' + hash[2] + '.specs').default;
        } else if (hashLocation.split("/")[1] != "transaction") {
          specifications = process.env.NODE_ENV === "production" ? require('egov-' + hash[2] + '/specifications/master/' + hash[3] + '.specs').default : require('../../' + hash[2] + '/lib/specifications/master/' + hash[3] + '.specs').default;
        } else {
          specifications = process.env.NODE_ENV === "production" ? require('egov-' + hash[2] + '/specifications/transaction/' + hash[3] + '.specs').default : require('../../' + hash[2] + '/lib/specifications/transaction/' + hash[3] + '.specs').default;
        }
      } catch (e) {}
      var _props = this.props,
          setMetaData = _props.setMetaData,
          setModuleName = _props.setModuleName,
          setActionName = _props.setActionName,
          initForm = _props.initForm,
          setMockData = _props.setMockData,
          setFormData = _props.setFormData;

      var obj = specifications[hashLocation.split("/")[2] + '.' + hashLocation.split("/")[1]];
      reqRequired = [];
      this.setLabelAndReturnRequired(obj);
      initForm(reqRequired);
      setMetaData(specifications);
      window.localStorage.setItem("specifications", JSON.stringify(specifications));
      setMockData(JSON.parse(JSON.stringify(specifications)));
      setModuleName(hashLocation.split("/")[2]);
      setActionName(hashLocation.split("/")[1]);
      var formData = {};
      if (obj && obj.groups && obj.groups.length) this.setDefaultValues(obj.groups, formData);
      setFormData(formData);

      this.setState({
        pathname: this.props.history.location.pathname,
        showResult: false
      });
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.props.resetDropdownData();
      this.initData();
      this.hasReturnUrl();
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.state.pathname && this.state.pathname != nextProps.history.location.pathname) {
        this.props.resetDropdownData();
        this.initData();
      }
    }
  }, {
    key: 'hasReturnUrl',
    value: function hasReturnUrl() {
      var search = this.search;

      if (localStorage.getItem("returnUrl")) {
        search(null, true);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          mockData = _props2.mockData,
          moduleName = _props2.moduleName,
          actionName = _props2.actionName,
          formData = _props2.formData,
          fieldErrors = _props2.fieldErrors,
          isFormValid = _props2.isFormValid;
      var search = this.search,
          handleChange = this.handleChange,
          getVal = this.getVal,
          addNewCard = this.addNewCard,
          removeCard = this.removeCard,
          rowClickHandler = this.rowClickHandler,
          rowButtonClickHandler = this.rowButtonClickHandler,
          rowCheckboxClickHandler = this.rowCheckboxClickHandler;
      var _state = this.state,
          showResult = _state.showResult,
          resultList = _state.resultList,
          selectedRecordId = _state.selectedRecordId;
      // console.log(formData);
      // console.log(this.props.dropDownData);

      return _react2.default.createElement(
        'div',
        { className: 'SearchResult' },
        _react2.default.createElement(
          _reactBootstrap.Row,
          null,
          _react2.default.createElement(
            _reactBootstrap.Col,
            { xs: 6, md: 6 },
            _react2.default.createElement(
              'h3',
              { style: { paddingLeft: 15, "marginBottom": "0" } },
              !_lodash2.default.isEmpty(mockData) && moduleName && actionName && mockData[moduleName + '.' + actionName] && mockData[moduleName + '.' + actionName].title ? (0, _egovCommonUtility.translate)(mockData[moduleName + '.' + actionName].title) : ""
            )
          ),
          _react2.default.createElement(
            _reactBootstrap.Col,
            { xs: 6, md: 6 },
            _react2.default.createElement(
              'div',
              { style: { "textAlign": "right", "color": "#FF0000", "marginTop": "15px", "marginRight": "15px", "paddingTop": "8px" } },
              _react2.default.createElement(
                'i',
                null,
                '( * ) ',
                (0, _egovCommonUtility.translate)("framework.required.note")
              )
            )
          )
        ),
        _react2.default.createElement(
          'form',
          { onSubmit: function onSubmit(e) {
              search(e);
            } },
          !_lodash2.default.isEmpty(mockData) && moduleName && actionName && mockData[moduleName + '.' + actionName] && _react2.default.createElement(_showFields2.default, { groups: mockData[moduleName + '.' + actionName].groups, noCols: mockData[moduleName + '.' + actionName].numCols, ui: 'google', handler: handleChange, getVal: getVal, fieldErrors: fieldErrors, useTimestamp: mockData[moduleName + '.' + actionName].useTimestamp || false, addNewCard: "", removeCard: "" }),
          _react2.default.createElement(
            'div',
            { style: { "textAlign": "center" } },
            _react2.default.createElement('br', null),
            _react2.default.createElement(_UiButton2.default, { item: { "label": "Search", "uiType": "submit", "isDisabled": isFormValid ? false : true }, ui: 'google' }),
            '\xA0\xA0',
            showResult && resultList.actionItems && resultList.actionItems.map(function (actionitem, index) {
              return _react2.default.createElement(
                'span',
                { style: { "margin-right": "20px" } },
                _react2.default.createElement(_UiButton2.default, { item: { "label": actionitem.label, "uiType": "primary" }, ui: 'google', handler: function handler() {
                    rowButtonClickHandler(actionitem.url);
                  } })
              );
            }),
            _react2.default.createElement(_UiButton2.default, { item: { "label": "Reset", "uiType": "button", "primary": false }, ui: 'google', handler: this.resetForm }),
            '\xA0\xA0',
            _react2.default.createElement('br', null),
            showResult && _react2.default.createElement(_UiTable2.default, { resultList: resultList, rowClickHandler: rowClickHandler, rowButtonClickHandler: rowButtonClickHandler, rowCheckboxClickHandler: rowCheckboxClickHandler, selectedValue: selectedRecordId })
          )
        )
      );
    }
  }]);

  return Search;
}(_react.Component);

var mapStateToProps = function mapStateToProps(state) {
  return {
    metaData: state.framework.metaData,
    mockData: state.framework.mockData,
    moduleName: state.framework.moduleName,
    actionName: state.framework.actionName,
    formData: state.frameworkForm.form,
    fieldErrors: state.frameworkForm.fieldErrors,
    flag: state.report.flag,
    isFormValid: state.frameworkForm.isFormValid,
    dropDownData: state.framework.dropDownData
  };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    initForm: function initForm(requiredFields) {
      dispatch({
        type: "SET_REQUIRED_FIELDS",
        requiredFields: requiredFields
      });
    },
    setMetaData: function setMetaData(metaData) {
      dispatch({ type: "SET_META_DATA", metaData: metaData });
    },
    setMockData: function setMockData(mockData) {
      dispatch({ type: "SET_MOCK_DATA", mockData: mockData });
    },
    setModuleName: function setModuleName(moduleName) {
      dispatch({ type: "SET_MODULE_NAME", moduleName: moduleName });
    },
    setActionName: function setActionName(actionName) {
      dispatch({ type: "SET_ACTION_NAME", actionName: actionName });
    },
    handleChange: function handleChange(e, property, isRequired, pattern, requiredErrMsg, patternErrMsg) {
      dispatch({ type: "HANDLE_CHANGE_FRAMEWORK", property: property, value: e.target.value, isRequired: isRequired, pattern: pattern, requiredErrMsg: requiredErrMsg, patternErrMsg: patternErrMsg });
    },
    setLoadingStatus: function setLoadingStatus(loadingStatus) {
      dispatch({ type: "SET_LOADING_STATUS", loadingStatus: loadingStatus });
    },
    toggleSnackbarAndSetText: function toggleSnackbarAndSetText(snackbarState, toastMsg, isSuccess, isError) {
      dispatch({ type: "TOGGLE_SNACKBAR_AND_SET_TEXT", snackbarState: snackbarState, toastMsg: toastMsg, isSuccess: isSuccess, isError: isError });
    },
    setRoute: function setRoute(route) {
      return dispatch({ type: "SET_ROUTE", route: route });
    },
    setFlag: function setFlag(flag) {
      dispatch({ type: "SET_FLAG", flag: flag });
    },
    setFormData: function setFormData(data) {
      dispatch({ type: "SET_FORM_DATA", data: data });
    },
    setDropDownData: function setDropDownData(fieldName, dropDownData) {
      console.log(fieldName, dropDownData);
      dispatch({ type: "SET_DROPDWON_DATA", fieldName: fieldName, dropDownData: dropDownData });
    },
    resetDropdownData: function resetDropdownData() {
      dispatch({ type: "RESET_DROPDOWN_DATA" });
    }
  };
};
exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Search);