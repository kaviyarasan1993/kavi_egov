/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.0-SNAPSHOT).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.ErrorRes;
import io.swagger.model.RequestInfo;
import io.swagger.model.TransferInwardRequest;
import io.swagger.model.TransferInwardResponse;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;

import java.util.List;
import org.springframework.validation.annotation.Validated;
import javax.validation.constraints.*;
import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2017-10-28T13:21:55.964+05:30")

@Api(value = "transferinwards", description = "the transferinwards API")
public interface TransferinwardsApi {

    @ApiOperation(value = "Create  new  transferinwards", nickname = "transferinwardsCreatePost", notes = "Create  new transferinwards", response = TransferInwardResponse.class, tags={ "Inventory","TransferInward", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "TransferInward created Successfully", response = TransferInwardResponse.class),
        @ApiResponse(code = 400, message = "Invalid Input", response = ErrorRes.class) })
    @RequestMapping(value = "/transferinwards/_create",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<TransferInwardResponse> transferinwardsCreatePost( @NotNull@ApiParam(value = "Unique id for a tenant.", required = true) @Valid @RequestParam(value = "tenantId", required = true) String tenantId,@ApiParam(value = "Create  new"  )  @Valid @RequestBody TransferInwardRequest transferInwardRequest, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Get the list of transferinwards", nickname = "transferinwardsSearchPost", notes = "transferinwards", response = TransferInwardResponse.class, tags={ "Inventory","TransferInward", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "TransferInward retrieved Successfully", response = TransferInwardResponse.class),
        @ApiResponse(code = 400, message = "Invalid Input", response = ErrorRes.class) })
    @RequestMapping(value = "/transferinwards/_search",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<TransferInwardResponse> transferinwardsSearchPost( @NotNull@ApiParam(value = "Unique id for a tenant.", required = true) @Valid @RequestParam(value = "tenantId", required = true) String tenantId,@ApiParam(value = "Parameter to carry Request metadata in the request body"  )  @Valid @RequestBody RequestInfo requestInfo, @Size(max=50)@ApiParam(value = "comma seperated list of Ids") @Valid @RequestParam(value = "ids", required = false) List<String> ids,@ApiParam(value = "receipt date of the TransferInward ") @Valid @RequestParam(value = "receiptDate", required = false) Long receiptDate,@ApiParam(value = "transfer out ward of the TransferInward ") @Valid @RequestParam(value = "transferOutWard", required = false) Long transferOutWard,@ApiParam(value = "description of the TransferInward ") @Valid @RequestParam(value = "description", required = false) String description,@ApiParam(value = "inward note number of the TransferInward ") @Valid @RequestParam(value = "inwardNoteNumber", required = false) String inwardNoteNumber,@ApiParam(value = "inward note status of the TransferInward ", allowableValues = "CREATED, APPROVED, REJECTED, CANCELED") @Valid @RequestParam(value = "inwardNoteStatus", required = false) String inwardNoteStatus,@ApiParam(value = "state id of the TransferInward ") @Valid @RequestParam(value = "stateId", required = false) Long stateId,@ApiParam(value = "pageSize") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,@ApiParam(value = "offset") @Valid @RequestParam(value = "offset", required = false) Integer offset,@ApiParam(value = "This takes any field from the Object seperated by comma and asc,desc keywords.   example name asc,code desc or name,code or name,code desc  ") @Valid @RequestParam(value = "sortBy", required = false) String sortBy, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Update any of the transferinwards", nickname = "transferinwardsUpdatePost", notes = "Update any of the transferinwards", response = TransferInwardResponse.class, tags={ "Inventory","TransferInward", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "TransferInward updated Successfully", response = TransferInwardResponse.class),
        @ApiResponse(code = 400, message = "Invalid Input", response = ErrorRes.class) })
    @RequestMapping(value = "/transferinwards/_update",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<TransferInwardResponse> transferinwardsUpdatePost( @NotNull@ApiParam(value = "Unique id for a tenant.", required = true) @Valid @RequestParam(value = "tenantId", required = true) String tenantId,@ApiParam(value = "common Request info"  )  @Valid @RequestBody TransferInwardRequest transferInwardRequest, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;

}
